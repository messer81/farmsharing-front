This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
app.js
CartDrawer-improved.tsx
CartDrawer.tsx
cartSlice.ts
Header-improved.tsx
Header.tsx
HeroSection.tsx
index.html
lib-utils.ts
package-fixed.json
ProductCard-improved.tsx
ProductCard.tsx
redux-store.ts
store-fixed.ts
style.css
tailwind-config.js
types-index.ts
utils.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="app.js">
// Application Data
const appData = {
  products: [
    {
      id: 1,
      title: "Fresh Yogurt",
      titleRu: "Свежий йогурт",
      titleHe: "יוגורט טרי",
      titleAr: "زبادي طازج",
      description: "Creamy organic yogurt made from fresh milk",
      descriptionRu: "Кремовый органический йогурт из свежего молока", 
      category: "Dairy",
      price: 12,
      originalPrice: 15,
      units: "jar",
      unitsRu: "баночка",
      amount: 25,
      imageUrl: "🥛",
      isOrganic: true,
      farm: {
        id: 1,
        name: "Green Valley Farm",
        nameRu: "Ферма Зеленая Долина",
        city: "Haifa",
        cityRu: "Хайфа",
        rating: 4.8,
        reviewsCount: 127
      }
    },
    {
      id: 2,
      title: "Jaffa Oranges",
      titleRu: "Яффские апельсины",
      titleHe: "תפוזי יפו",
      titleAr: "برتقال يافا",
      description: "World-famous sweet and juicy Jaffa oranges",
      descriptionRu: "Всемирно известные сладкие сочные яффские апельсины",
      category: "Fruits",
      price: 8,
      units: "kg",
      unitsRu: "кг",
      amount: 50,
      imageUrl: "🍊",
      isOrganic: false,
      farm: {
        id: 2,
        name: "Sunshine Citrus",
        nameRu: "Солнечные Цитрусы",
        city: "Tel Aviv",
        cityRu: "Тель-Авив",
        rating: 4.5,
        reviewsCount: 89
      }
    },
    {
      id: 3,
      title: "Cherry Tomatoes",
      titleRu: "Помидоры черри",
      titleHe: "עגבניות שרי",
      titleAr: "طماطم كرزية",
      description: "Sweet and colorful cherry tomatoes",
      descriptionRu: "Сладкие и яркие помидоры черри",
      category: "Vegetables",
      price: 15,
      units: "kg",
      unitsRu: "кг",
      amount: 30,
      imageUrl: "🍅",
      isOrganic: true,
      farm: {
        id: 3,
        name: "Desert Bloom",
        nameRu: "Пустынное Цветение",
        city: "Eilat",
        cityRu: "Эйлат",
        rating: 4.2,
        reviewsCount: 56
      }
    },
    {
      id: 4,
      title: "Farm Fresh Cheese",
      titleRu: "Фермерский сыр",
      titleHe: "גבינה טרייה מהחווה",
      titleAr: "جبن طازج من المزرعة",
      description: "Artisanal cheese made from premium milk",
      descriptionRu: "Ремесленный сыр из молока премиум качества",
      category: "Dairy",
      price: 28,
      units: "piece",
      unitsRu: "кусок",
      amount: 15,
      imageUrl: "🧀",
      isOrganic: true,
      farm: {
        id: 4,
        name: "Happy Hen Farm",
        nameRu: "Ферма Счастливых Кур",
        city: "Jerusalem",
        cityRu: "Иерусалим",
        rating: 4.9,
        reviewsCount: 203
      }
    },
    {
      id: 5,
      title: "Wild Flower Honey",
      titleRu: "Мед диких цветов",
      titleHe: "דבש פרחים בר",
      titleAr: "عسل الزهور البرية",
      description: "Pure raw honey from wild flowers",
      descriptionRu: "Чистый сырой мед из диких цветов",
      category: "Pantry",
      price: 45,
      originalPrice: 55,
      units: "jar",
      unitsRu: "банка",
      amount: 20,
      imageUrl: "🍯",
      isOrganic: true,
      farm: {
        id: 5,
        name: "Buzzing Bee Apiary",
        nameRu: "Пасека Жужжащих Пчел",
        city: "Tiberias",
        cityRu: "Тверия",
        rating: 4.7,
        reviewsCount: 92
      }
    },
    {
      id: 6,
      title: "Fresh Roses",
      titleRu: "Свежие розы",
      titleHe: "ורדים טריים",
      titleAr: "ورود طازجة",
      description: "Beautiful fresh cut roses",
      descriptionRu: "Красивые свежесрезанные розы",
      category: "Herbs",
      price: 20,
      units: "bunch",
      unitsRu: "букет",
      amount: 12,
      imageUrl: "🌹",
      isOrganic: false,
      farm: {
        id: 6,
        name: "Garden Paradise",
        nameRu: "Садовый Рай",
        city: "Haifa",
        cityRu: "Хайфа",
        rating: 4.3,
        reviewsCount: 67
      }
    },
    {
      id: 7,
      title: "Fresh Basil",
      titleRu: "Свежий базилик",
      titleHe: "ריחן טרי",
      titleAr: "ريحان طازج",
      description: "Aromatic fresh basil leaves",
      descriptionRu: "Ароматные свежие листья базилика",
      category: "Herbs",
      price: 8,
      units: "bunch",
      unitsRu: "пучок",
      amount: 40,
      imageUrl: "🌿",
      isOrganic: true,
      farm: {
        id: 7,
        name: "Herb Heaven",
        nameRu: "Райские Травы",
        city: "Safed",
        cityRu: "Цфат",
        rating: 4.6,
        reviewsCount: 78
      }
    },
    {
      id: 8,
      title: "Crispy Cucumbers",
      titleRu: "Хрустящие огурцы",
      titleHe: "מלפפונים פריכים",
      titleAr: "خيار مقرمش",
      description: "Fresh crunchy cucumbers perfect for salads",
      descriptionRu: "Свежие хрустящие огурцы идеальные для салатов",
      category: "Vegetables",
      price: 6,
      units: "kg",
      unitsRu: "кг",
      amount: 60,
      imageUrl: "🥒",
      isOrganic: false,
      farm: {
        id: 1,
        name: "Green Valley Farm",
        nameRu: "Ферма Зеленая Долина", 
        city: "Haifa",
        cityRu: "Хайфа",
        rating: 4.8,
        reviewsCount: 127
      }
    }
  ],
  categories: [
    {id: "all", name: "All Products", nameRu: "Все продукты", icon: "🛒"},
    {id: "Fruits", name: "Fruits", nameRu: "Фрукты", icon: "🍎"},
    {id: "Vegetables", name: "Vegetables", nameRu: "Овощи", icon: "🥕"},
    {id: "Dairy", name: "Dairy", nameRu: "Молочные", icon: "🥛"},
    {id: "Herbs", name: "Herbs", nameRu: "Травы", icon: "🌿"},
    {id: "Pantry", name: "Pantry", nameRu: "Кладовая", icon: "🍯"}
  ],
  currencies: [
    {code: "ILS", symbol: "₪", name: "Israeli Shekel", rate: 1},
    {code: "USD", symbol: "$", name: "US Dollar", rate: 0.27},
    {code: "EUR", symbol: "€", name: "Euro", rate: 0.25}
  ],
  languages: [
    {code: "en", name: "English", flag: "🇺🇸"},
    {code: "he", name: "עברית", flag: "🇮🇱"},
    {code: "ar", name: "العربية", flag: "🇸🇦"},
    {code: "ru", name: "Русский", flag: "🇷🇺"}
  ],
  translations: {
    en: {
      // Header
      search_placeholder: "Search products...",
      sell_products: "Sell Products",
      cart: "Cart",
      // Hero
      hero_title: "Fresh from",
      hero_title_highlight: "farm to table",
      hero_subtitle: "Direct connection with local Israeli farmers. Fresh, organic products delivered straight to your home.",
      farmers_stat: "Farmers",
      customers_stat: "Customers", 
      delivery_stat: "Delivery",
      shop_products: "Shop Fresh Products",
      become_seller: "Become a Seller",
      testimonial: "\"Best vegetables in Israel!\"",
      testimonial_author: "— Rachel, Tel Aviv",
      // Products
      fresh_products: "Fresh Products",
      products_subtitle: "Choose the best products from our verified farmers",
      all_category: "All Products",
      in_stock: "In stock",
      left_in_stock: "left",
      add_to_cart: "Add to Cart",
      in_cart: "In Cart",
      adding: "Adding...",
      // Cart
      shopping_cart: "Shopping Cart",
      free_delivery_progress: "Until free delivery:",
      empty_cart: "Cart is empty",
      empty_cart_subtitle: "Add products to purchase",
      promo_placeholder: "Enter promo code",
      apply: "Apply",
      products_total: "Products:",
      delivery_cost: "Delivery:",
      total: "Total:",
      free: "Free",
      checkout: "Checkout",
      // Search
      no_products: "No products found",
      // Toast
      added_to_cart: "Product added to cart!"
    },
    ru: {
      // Header
      search_placeholder: "Поиск продуктов...",
      sell_products: "Продать продукцию",
      cart: "Корзина",
      // Hero
      hero_title: "Свежие продукты",
      hero_title_highlight: "от фермы к столу",
      hero_subtitle: "Прямая связь с местными фермерами Израиля. Свежие, органические продукты с доставкой прямо к вашему дому.",
      farmers_stat: "Фермеров",
      customers_stat: "Клиентов",
      delivery_stat: "Доставка",
      shop_products: "Купить свежие продукты",
      become_seller: "Стать продавцом",
      testimonial: "\"Лучшие овощи в Израиле!\"",
      testimonial_author: "— Рахель, Тель-Авив",
      // Products
      fresh_products: "Свежие продукты",
      products_subtitle: "Выберите лучшие продукты от наших проверенных фермеров",
      all_category: "Все продукты",
      in_stock: "В наличии",
      left_in_stock: "осталось",
      add_to_cart: "В корзину",
      in_cart: "В корзине",
      adding: "Добавляем...",
      // Cart
      shopping_cart: "Корзина покупок",
      free_delivery_progress: "До бесплатной доставки:",
      empty_cart: "Корзина пуста",
      empty_cart_subtitle: "Добавьте продукты для покупки",
      promo_placeholder: "Введите промокод",
      apply: "Применить",
      products_total: "Товары:",
      delivery_cost: "Доставка:",
      total: "Итого:",
      free: "Бесплатно",
      checkout: "Оформить заказ",
      // Search
      no_products: "Продукты не найдены",
      // Toast
      added_to_cart: "Товар добавлен в корзину!"
    },
    he: {
      // Header
      search_placeholder: "חיפוש מוצרים...",
      sell_products: "מכירת מוצרים",
      cart: "עגלת קניות",
      // Hero
      hero_title: "טרי מהחווה",
      hero_title_highlight: "לשולחן שלכם",
      hero_subtitle: "קשר ישיר עם חקלאים מקומיים בישראל. מוצרים טריים ואורגניים עד הבית.",
      farmers_stat: "חקלאים",
      customers_stat: "לקוחות",
      delivery_stat: "משלוח",
      shop_products: "קנו מוצרים טריים",
      become_seller: "הפכו למוכרים",
      testimonial: "\"הירקות הטובים ביותר בישראל!\"",
      testimonial_author: "— רחל, תל אביב",
      // Products
      fresh_products: "מוצרים טריים",
      products_subtitle: "בחרו את המוצרים הטובים ביותר מהחקלאים המאומתים שלנו",
      all_category: "כל המוצרים",
      in_stock: "במלאי",
      left_in_stock: "נותרו",
      add_to_cart: "הוסף לעגלה",
      in_cart: "בעגלה",
      adding: "מוסיף...",
      // Cart
      shopping_cart: "עגלת קניות",
      free_delivery_progress: "עד למשלוח חינם:",
      empty_cart: "העגלה ריקה",
      empty_cart_subtitle: "הוסיפו מוצרים לרכישה",
      promo_placeholder: "הזינו קוד הנחה",
      apply: "החל",
      products_total: "מוצרים:",
      delivery_cost: "משלוח:",
      total: "סה\"כ:",
      free: "חינם",
      checkout: "המשך לתשלום",
      // Search
      no_products: "לא נמצאו מוצרים",
      // Toast
      added_to_cart: "המוצר נוסף לעגלה!"
    },
    ar: {
      // Header
      search_placeholder: "البحث عن المنتجات...",
      sell_products: "بيع المنتجات",
      cart: "سلة التسوق",
      // Hero
      hero_title: "طازج من المزرعة",
      hero_title_highlight: "إلى المائدة",
      hero_subtitle: "اتصال مباشر مع المزارعين المحليين الإسرائيليين. منتجات طازجة وعضوية تُسلم مباشرة إلى منزلك.",
      farmers_stat: "مزارعون",
      customers_stat: "عملاء",
      delivery_stat: "توصيل",
      shop_products: "اشتري منتجات طازجة",
      become_seller: "كن بائعاً",
      testimonial: "\"أفضل الخضروات في إسرائيل!\"",
      testimonial_author: "— راحيل، تل أبيب",
      // Products
      fresh_products: "منتجات طازجة",
      products_subtitle: "اختر أفضل المنتجات من مزارعينا المعتمدين",
      all_category: "جميع المنتجات",
      in_stock: "متوفر",
      left_in_stock: "متبقي",
      add_to_cart: "أضف للسلة",
      in_cart: "في السلة",
      adding: "جاري الإضافة...",
      // Cart
      shopping_cart: "سلة التسوق",
      free_delivery_progress: "حتى التوصيل المجاني:",
      empty_cart: "السلة فارغة",
      empty_cart_subtitle: "أضف منتجات للشراء",
      promo_placeholder: "أدخل رمز الخصم",
      apply: "تطبيق",
      products_total: "المنتجات:",
      delivery_cost: "التوصيل:",
      total: "المجموع:",
      free: "مجاني",
      checkout: "إتمام الطلب",
      // Search
      no_products: "لم يتم العثور على منتجات",
      // Toast
      added_to_cart: "تم إضافة المنتج إلى السلة!"
    }
  }
};

// Application State
class AppState {
  constructor() {
    this.cart = [];
    this.favorites = [];
    this.currentCategory = 'all';
    this.currentCurrency = 'ILS';
    this.currentLanguage = 'ru';
    this.isDarkTheme = false;
    this.searchQuery = '';
    this.isCartOpen = false;
    this.isSearchOpen = false;
    
    this.init();
  }

  init() {
    this.applyTheme();
    this.setupEventListeners();
    this.renderProducts();
    this.updateCartUI();
    this.updateLanguageUI();
    
    // Initialize product card animations after a delay
    setTimeout(() => {
      this.initializeProductAnimations();
    }, 100);
  }

  t(key) {
    const translations = appData.translations[this.currentLanguage] || appData.translations.ru;
    return translations[key] || key;
  }

  applyTheme() {
    document.documentElement.setAttribute('data-color-scheme', this.isDarkTheme ? 'dark' : 'light');
    const themeIcon = document.querySelector('#themeToggle i');
    if (themeIcon) {
      themeIcon.className = this.isDarkTheme ? 'fas fa-moon' : 'fas fa-sun';
    }
  }

  setupEventListeners() {
    console.log('Setting up event listeners...');
    
    // Theme toggle
    const themeToggle = document.getElementById('themeToggle');
    if (themeToggle) {
      themeToggle.addEventListener('click', () => {
        console.log('Theme toggle clicked');
        this.toggleTheme();
      });
    }

    // Search functionality  
    const searchBtn = document.getElementById('searchBtn');
    if (searchBtn) {
      searchBtn.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        console.log('Search button clicked');
        this.toggleSearch();
      });
    }

    const searchClose = document.getElementById('searchClose');
    if (searchClose) {
      searchClose.addEventListener('click', () => {
        console.log('Search close clicked');
        this.closeSearch();
      });
    }

    const searchInput = document.getElementById('searchInput');
    if (searchInput) {
      searchInput.addEventListener('input', (e) => {
        console.log('Search input changed:', e.target.value);
        this.searchQuery = e.target.value;
        this.renderProducts();
      });
    }

    // Cart functionality
    const cartBtn = document.getElementById('cartBtn');
    if (cartBtn) {
      cartBtn.addEventListener('click', () => {
        console.log('Cart button clicked');
        this.toggleCart();
      });
    }

    const cartClose = document.getElementById('cartClose');
    if (cartClose) {
      cartClose.addEventListener('click', () => {
        console.log('Cart close clicked');
        this.closeCart();
      });
    }

    const cartOverlay = document.getElementById('cartOverlay');
    if (cartOverlay) {
      cartOverlay.addEventListener('click', () => {
        console.log('Cart overlay clicked');
        this.closeCart();
      });
    }

    // Language selector
    this.setupDropdown('languageBtn', 'languageMenu', (item) => {
      const lang = item.getAttribute('data-lang');
      console.log('Language selected:', lang);
      this.setLanguage(lang);
    });

    // Currency selector
    this.setupDropdown('currencyBtn', 'currencyMenu', (item) => {
      const currency = item.getAttribute('data-currency');
      console.log('Currency selected:', currency);
      this.setCurrency(currency);
    });

    // Category filter
    document.querySelectorAll('.category-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        const category = btn.getAttribute('data-category');
        console.log('Category selected:', category);
        this.setCategory(category);
      });
    });

    // Navigation links
    document.querySelectorAll('.nav-link').forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const href = link.getAttribute('href');
        console.log('Navigation clicked:', href);
        if (href.startsWith('#')) {
          const target = document.querySelector(href);
          if (target) {
            target.scrollIntoView({ behavior: 'smooth' });
          }
        }
      });
    });

    // Close dropdowns when clicking outside
    document.addEventListener('click', (e) => {
      if (!e.target.closest('.dropdown')) {
        this.closeAllDropdowns();
      }
    });

    // Hero buttons
    const shopBtn = document.getElementById('shopBtn');
    if (shopBtn) {
      shopBtn.addEventListener('click', () => {
        console.log('Shop button clicked');
        document.getElementById('products')?.scrollIntoView({ behavior: 'smooth' });
      });
    }

    // Checkout button
    const checkoutBtn = document.getElementById('checkoutBtn');
    if (checkoutBtn) {
      checkoutBtn.addEventListener('click', () => {
        console.log('Checkout button clicked');
        this.checkout();
      });
    }

    // Scroll effects
    this.setupScrollEffects();
  }

  setupScrollEffects() {
    let lastScrollY = window.scrollY;
    const header = document.querySelector('.header');
    
    window.addEventListener('scroll', () => {
      const currentScrollY = window.scrollY;
      
      if (header) {
        if (currentScrollY > lastScrollY && currentScrollY > 100) {
          header.style.transform = 'translateY(-100%)';
        } else {
          header.style.transform = 'translateY(0)';
        }
      }
      
      lastScrollY = currentScrollY;
    });
  }

  initializeProductAnimations() {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry, index) => {
        if (entry.isIntersecting) {
          setTimeout(() => {
            entry.target.classList.add('visible');
          }, index * 100);
        }
      });
    }, {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    });

    document.querySelectorAll('.product-card').forEach(card => {
      observer.observe(card);
    });
  }

  setupDropdown(buttonId, menuId, onItemClick) {
    const button = document.getElementById(buttonId);
    const menu = document.getElementById(menuId);
    
    console.log(`Setting up dropdown: ${buttonId}, ${menuId}`, button, menu);
    
    if (!button || !menu) return;

    button.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      console.log(`Dropdown button clicked: ${buttonId}`);
      this.closeAllDropdowns();
      menu.classList.toggle('hidden');
    });

    menu.querySelectorAll('.dropdown-item').forEach(item => {
      item.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        console.log('Dropdown item clicked:', item);
        onItemClick(item);
        menu.classList.add('hidden');
      });
    });
  }

  closeAllDropdowns() {
    document.querySelectorAll('.dropdown-menu').forEach(menu => {
      menu.classList.add('hidden');
    });
  }

  toggleTheme() {
    this.isDarkTheme = !this.isDarkTheme;
    this.applyTheme();
  }

  toggleSearch() {
    this.isSearchOpen = !this.isSearchOpen;
    const searchContainer = document.getElementById('searchContainer');
    const searchInput = document.getElementById('searchInput');
    
    console.log('Toggle search:', this.isSearchOpen, searchContainer);
    
    if (this.isSearchOpen) {
      searchContainer?.classList.remove('hidden');
      searchInput?.focus();
    } else {
      searchContainer?.classList.add('hidden');
      this.searchQuery = '';
      if (searchInput) searchInput.value = '';
      this.renderProducts();
    }
  }

  closeSearch() {
    this.isSearchOpen = false;
    document.getElementById('searchContainer')?.classList.add('hidden');
    this.searchQuery = '';
    const searchInput = document.getElementById('searchInput');
    if (searchInput) searchInput.value = '';
    this.renderProducts();
  }

  toggleCart() {
    this.isCartOpen = !this.isCartOpen;
    const cartDrawer = document.getElementById('cartDrawer');
    
    console.log('Toggle cart:', this.isCartOpen, cartDrawer);
    
    if (this.isCartOpen) {
      cartDrawer?.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
    } else {
      cartDrawer?.classList.add('hidden');
      document.body.style.overflow = '';
    }
  }

  closeCart() {
    this.isCartOpen = false;
    document.getElementById('cartDrawer')?.classList.add('hidden');
    document.body.style.overflow = '';
  }

  setLanguage(langCode) {
    this.currentLanguage = langCode;
    const language = appData.languages.find(l => l.code === langCode);
    
    if (language) {
      const langBtn = document.getElementById('languageBtn');
      if (langBtn) {
        const flagEl = langBtn.querySelector('.flag');
        const textEl = langBtn.querySelector('.text');
        if (flagEl) flagEl.textContent = language.flag;
        if (textEl) textEl.textContent = language.name;
      }
    }
    
    this.updateLanguageUI();
    this.renderProducts();
    this.updateCartUI();
  }

  updateLanguageUI() {
    // Update search placeholder
    const searchInput = document.getElementById('searchInput');
    if (searchInput) {
      searchInput.placeholder = this.t('search_placeholder');
    }

    // Update hero content
    const heroTitle = document.querySelector('.hero__title .title-main');
    const heroHighlight = document.querySelector('.hero__title .highlight');
    const heroSubtitle = document.querySelector('.hero__subtitle');
    
    if (heroTitle) heroTitle.textContent = this.t('hero_title');
    if (heroHighlight) heroHighlight.textContent = this.t('hero_title_highlight');
    if (heroSubtitle) heroSubtitle.textContent = this.t('hero_subtitle');

    // Update stats labels
    const statLabels = document.querySelectorAll('.stat__label');
    const statKeys = ['farmers_stat', 'customers_stat', 'delivery_stat'];
    statLabels.forEach((label, index) => {
      if (statKeys[index]) {
        label.textContent = this.t(statKeys[index]);
      }
    });

    // Update section title
    const sectionTitle = document.querySelector('.section-title');
    const sectionSubtitle = document.querySelector('.section-subtitle');
    
    if (sectionTitle) sectionTitle.textContent = this.t('fresh_products');
    if (sectionSubtitle) sectionSubtitle.textContent = this.t('products_subtitle');

    // Update category buttons
    this.updateCategoryButtons();

    // Update hero buttons
    const shopBtn = document.querySelector('#shopBtn span');
    const sellBtn = document.querySelector('.sell-btn .sell-text');
    
    if (shopBtn) shopBtn.textContent = this.t('shop_products');
    if (sellBtn) sellBtn.textContent = this.t('sell_products');

    // Update testimonial
    const testimonialText = document.querySelector('.testimonial__text');
    const testimonialAuthor = document.querySelector('.testimonial__author');
    
    if (testimonialText) testimonialText.textContent = this.t('testimonial');
    if (testimonialAuthor) testimonialAuthor.textContent = this.t('testimonial_author');

    // Update cart elements
    const cartTitle = document.querySelector('.cart-drawer__header h3');
    const progressText = document.querySelector('.progress-text');
    const promoInput = document.getElementById('promoInput');
    const applyBtn = document.getElementById('applyPromo');
    const checkoutBtn = document.querySelector('#checkoutBtn span');
    
    if (cartTitle) cartTitle.textContent = this.t('shopping_cart');
    if (progressText) progressText.textContent = this.t('free_delivery_progress');
    if (promoInput) promoInput.placeholder = this.t('promo_placeholder');
    if (applyBtn) applyBtn.textContent = this.t('apply');
    if (checkoutBtn) checkoutBtn.textContent = this.t('checkout');
  }

  updateCategoryButtons() {
    const categoryButtons = document.querySelectorAll('.category-btn');
    
    categoryButtons.forEach(btn => {
      const category = btn.getAttribute('data-category');
      
      if (category === 'all') {
        btn.innerHTML = `<span>🛒 ${this.t('all_category')}</span>`;
      } else {
        const categoryData = appData.categories.find(c => c.id === category);
        if (categoryData) {
          const categoryName = this.currentLanguage === 'ru' ? categoryData.nameRu : categoryData.name;
          btn.innerHTML = `<span>${categoryData.icon} ${categoryName}</span>`;
        }
      }
    });
  }

  setCurrency(currencyCode) {
    this.currentCurrency = currencyCode;
    const currency = appData.currencies.find(c => c.code === currencyCode);
    
    if (currency) {
      const currencyBtn = document.getElementById('currencyBtn');
      if (currencyBtn) {
        const symbolEl = currencyBtn.querySelector('.currency-symbol');
        if (symbolEl) symbolEl.textContent = currency.symbol;
      }
    }
    
    this.renderProducts();
    this.updateCartUI();
  }

  setCategory(category) {
    console.log('Setting category to:', category);
    this.currentCategory = category;
    
    document.querySelectorAll('.category-btn').forEach(btn => {
      btn.classList.remove('active');
    });
    
    const activeBtn = document.querySelector(`[data-category="${category}"]`);
    if (activeBtn) {
      activeBtn.classList.add('active');
    }
    
    this.renderProducts();
  }

  getFilteredProducts() {
    let products = [...appData.products];
    
    console.log(`Filtering products. Category: ${this.currentCategory}, Search: ${this.searchQuery}`);
    
    if (this.currentCategory !== 'all') {
      products = products.filter(p => p.category === this.currentCategory);
      console.log(`After category filter: ${products.length} products`);
    }
    
    if (this.searchQuery) {
      const query = this.searchQuery.toLowerCase();
      products = products.filter(p => {
        const title = this.getProductTitle(p);
        const farmName = this.getFarmName(p.farm);
        
        const matches = title.toLowerCase().includes(query) ||
               farmName.toLowerCase().includes(query);
        
        return matches;
      });
      console.log(`After search filter: ${products.length} products`);
    }
    
    return products;
  }

  getProductTitle(product) {
    switch (this.currentLanguage) {
      case 'ru': return product.titleRu || product.title;
      case 'he': return product.titleHe || product.title;
      case 'ar': return product.titleAr || product.title;
      default: return product.title;
    }
  }

  getFarmName(farm) {
    return this.currentLanguage === 'ru' ? farm.nameRu || farm.name : farm.name;
  }

  getFarmCity(farm) {
    return this.currentLanguage === 'ru' ? farm.cityRu || farm.city : farm.city;
  }

  getProductUnits(product) {
    return this.currentLanguage === 'ru' ? product.unitsRu || product.units : product.units;
  }

  formatPrice(price) {
    const currency = appData.currencies.find(c => c.code === this.currentCurrency);
    if (!currency) return `₪${price}`;
    
    const convertedPrice = Math.round(price * currency.rate * 100) / 100;
    return `${currency.symbol}${convertedPrice}`;
  }

  renderProducts() {
    const grid = document.getElementById('productsGrid');
    if (!grid) return;

    const products = this.getFilteredProducts();
    
    console.log(`Rendering ${products.length} products`);
    
    if (products.length === 0) {
      grid.innerHTML = `
        <div style="grid-column: 1 / -1; text-align: center; padding: 2rem; color: var(--color-text-secondary);">
          <i class="fas fa-search" style="font-size: 3rem; margin-bottom: 1rem; opacity: 0.5;"></i>
          <p>${this.t('no_products')}</p>
        </div>
      `;
      return;
    }

    grid.innerHTML = products.map(product => this.renderProductCard(product)).join('');
    
    this.setupProductCardListeners();
    
    setTimeout(() => {
      this.initializeProductAnimations();
    }, 100);
  }

  renderProductCard(product) {
    const isInCart = this.cart.some(item => item.id === product.id);
    const isFavorite = this.favorites.includes(product.id);
    const stockClass = product.amount < 10 ? 'low-stock' : '';
    
    const title = this.getProductTitle(product);
    const farmName = this.getFarmName(product.farm);
    const city = this.getFarmCity(product.farm);
    const units = this.getProductUnits(product);
    
    return `
      <div class="product-card" data-product-id="${product.id}">
        <div class="product-card__image-container">
          <div class="product-card__image-placeholder">${product.imageUrl}</div>
          ${product.isOrganic ? '<div class="organic-badge">Organic</div>' : ''}
          <button class="favorite-btn ${isFavorite ? 'active' : ''}" data-product-id="${product.id}">
            <i class="fas fa-heart"></i>
          </button>
        </div>
        
        <div class="product-card__content">
          <h3 class="product-card__title">${title}</h3>
          
          <div class="product-card__farm">
            <div class="farm-info">
              <i class="fas fa-map-marker-alt"></i>
              <span>${farmName}, ${city}</span>
            </div>
            <div class="farm-rating">
              <i class="fas fa-star"></i>
              <span>${product.farm.rating}</span>
              <span>(${product.farm.reviewsCount})</span>
            </div>
          </div>
          
          <div class="product-card__price-section">
            <div class="price-container">
              <span class="product-card__price">${this.formatPrice(product.price)}</span>
              ${product.originalPrice ? `<span class="product-card__original-price">${this.formatPrice(product.originalPrice)}</span>` : ''}
              <span class="product-card__units">/${units}</span>
            </div>
            
            <div class="stock-info ${stockClass}">
              ${product.amount < 10 ? `${product.amount} ${this.t('left_in_stock')}` : this.t('in_stock')}
            </div>
          </div>
          
          <button class="add-to-cart-btn ${isInCart ? 'added' : ''}" data-product-id="${product.id}">
            <i class="fas fa-shopping-cart"></i>
            <span>${isInCart ? this.t('in_cart') : this.t('add_to_cart')}</span>
          </button>
        </div>
      </div>
    `;
  }

  setupProductCardListeners() {
    document.querySelectorAll('.add-to-cart-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        e.stopPropagation();
        const productId = parseInt(btn.getAttribute('data-product-id'));
        console.log('Add to cart clicked for product:', productId);
        this.addToCart(productId);
      });
    });

    document.querySelectorAll('.favorite-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        e.stopPropagation();
        const productId = parseInt(btn.getAttribute('data-product-id'));
        console.log('Favorite clicked for product:', productId);
        this.toggleFavorite(productId);
      });
    });
  }

  async addToCart(productId) {
    const product = appData.products.find(p => p.id === productId);
    if (!product) return;

    console.log('Adding product to cart:', product);

    const btn = document.querySelector(`[data-product-id="${productId}"].add-to-cart-btn`);
    const loadingOverlay = document.getElementById('loadingOverlay');
    
    if (btn) {
      btn.innerHTML = `<i class="fas fa-spinner btn-spinner"></i><span>${this.t('adding')}</span>`;
      btn.classList.add('loading');
    }
    
    loadingOverlay?.classList.remove('hidden');

    await new Promise(resolve => setTimeout(resolve, 1000));

    const existingItem = this.cart.find(item => item.id === productId);
    
    if (existingItem) {
      existingItem.quantity += 1;
    } else {
      this.cart.push({
        ...product,
        quantity: 1,
        addedAt: Date.now()
      });
    }

    console.log('Cart after adding:', this.cart);

    loadingOverlay?.classList.add('hidden');
    
    if (btn) {
      btn.innerHTML = `<i class="fas fa-check"></i><span>${this.t('in_cart')}</span>`;
      btn.classList.remove('loading');
      btn.classList.add('added');
      
      setTimeout(() => {
        btn.innerHTML = `<i class="fas fa-shopping-cart"></i><span>${this.t('in_cart')}</span>`;
      }, 1000);
    }

    this.updateCartUI();
    this.showSuccessToast();
    this.showAddToCartAnimation(product);
  }

  showSuccessToast() {
    const toast = document.getElementById('successToast');
    if (toast) {
      const textEl = toast.querySelector('span');
      if (textEl) textEl.textContent = this.t('added_to_cart');
      toast.classList.remove('hidden');
      
      setTimeout(() => {
        toast.classList.add('hidden');
      }, 3000);
    }
  }

  showAddToCartAnimation(product) {
    const floatingElement = document.createElement('div');
    
    floatingElement.innerHTML = product.imageUrl;
    floatingElement.style.cssText = `
      position: fixed;
      font-size: 2rem;
      z-index: 9999;
      pointer-events: none;
      animation: floatToCart 1s ease-out forwards;
      top: 50%;
      left: 50%;
    `;
    
    document.body.appendChild(floatingElement);
    
    setTimeout(() => {
      floatingElement.remove();
    }, 1000);
  }

  toggleFavorite(productId) {
    const index = this.favorites.indexOf(productId);
    const btn = document.querySelector(`[data-product-id="${productId}"].favorite-btn`);
    
    if (index > -1) {
      this.favorites.splice(index, 1);
      btn?.classList.remove('active');
    } else {
      this.favorites.push(productId);
      btn?.classList.add('active');
    }
  }

  updateCartUI() {
    this.updateCartCount();
    this.renderCartItems();
    this.updateCartSummary();
    this.updateFreeDeliveryProgress();
  }

  updateCartCount() {
    const cartCount = document.getElementById('cartCount');
    const totalItems = this.cart.reduce((sum, item) => sum + item.quantity, 0);
    
    console.log('Updating cart count:', totalItems);
    
    if (cartCount) {
      cartCount.textContent = totalItems;
      cartCount.style.display = totalItems > 0 ? 'block' : 'none';
    }
  }

  renderCartItems() {
    const cartItemsContainer = document.getElementById('cartItems');
    if (!cartItemsContainer) return;

    console.log('Rendering cart items:', this.cart);

    if (this.cart.length === 0) {
      cartItemsContainer.innerHTML = `
        <div class="empty-cart">
          <i class="fas fa-shopping-cart"></i>
          <p>${this.t('empty_cart')}</p>
          <p class="empty-cart__subtitle">${this.t('empty_cart_subtitle')}</p>
        </div>
      `;
      return;
    }

    cartItemsContainer.innerHTML = this.cart.map(item => {
      const title = this.getProductTitle(item);
      const farmName = this.getFarmName(item.farm);
      
      return `
        <div class="cart-item" data-item-id="${item.id}">
          <div class="cart-item__image">${item.imageUrl}</div>
          
          <div class="cart-item__content">
            <div class="cart-item__name">${title}</div>
            <div class="cart-item__farm">${farmName}</div>
            
            <div class="cart-item__controls">
              <div class="quantity-controls">
                <button class="quantity-btn decrease" data-item-id="${item.id}" ${item.quantity <= 1 ? 'disabled' : ''}>
                  <i class="fas fa-minus"></i>
                </button>
                <span class="quantity-display">${item.quantity}</span>
                <button class="quantity-btn increase" data-item-id="${item.id}">
                  <i class="fas fa-plus"></i>
                </button>
              </div>
              
              <div style="display: flex; align-items: center;">
                <span class="cart-item__price">${this.formatPrice(item.price * item.quantity)}</span>
                <button class="remove-item-btn" data-item-id="${item.id}">
                  <i class="fas fa-trash"></i>
                </button>
              </div>
            </div>
          </div>
        </div>
      `;
    }).join('');

    this.setupCartItemListeners();
  }

  setupCartItemListeners() {
    document.querySelectorAll('.quantity-btn.decrease').forEach(btn => {
      btn.addEventListener('click', () => {
        const itemId = parseInt(btn.getAttribute('data-item-id'));
        this.updateCartItemQuantity(itemId, -1);
      });
    });

    document.querySelectorAll('.quantity-btn.increase').forEach(btn => {
      btn.addEventListener('click', () => {
        const itemId = parseInt(btn.getAttribute('data-item-id'));
        this.updateCartItemQuantity(itemId, 1);
      });
    });

    document.querySelectorAll('.remove-item-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        const itemId = parseInt(btn.getAttribute('data-item-id'));
        this.removeFromCart(itemId);
      });
    });
  }

  updateCartItemQuantity(itemId, change) {
    const item = this.cart.find(item => item.id === itemId);
    if (!item) return;

    item.quantity += change;
    
    if (item.quantity <= 0) {
      this.removeFromCart(itemId);
    } else {
      this.updateCartUI();
    }
  }

  removeFromCart(itemId) {
    this.cart = this.cart.filter(item => item.id !== itemId);
    this.updateCartUI();
    
    const btn = document.querySelector(`[data-product-id="${itemId}"].add-to-cart-btn`);
    if (btn) {
      btn.innerHTML = `<i class="fas fa-shopping-cart"></i><span>${this.t('add_to_cart')}</span>`;
      btn.classList.remove('added');
    }
  }

  updateCartSummary() {
    const subtotalEl = document.getElementById('subtotal');
    const deliveryEl = document.getElementById('delivery');
    const totalEl = document.getElementById('total');

    const subtotal = this.cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    const deliveryFee = subtotal >= 100 ? 0 : 15;
    const total = subtotal + deliveryFee;

    if (subtotalEl) subtotalEl.textContent = this.formatPrice(subtotal);
    if (deliveryEl) deliveryEl.textContent = deliveryFee === 0 ? this.t('free') : this.formatPrice(deliveryFee);
    if (totalEl) totalEl.textContent = this.formatPrice(total);

    // Update summary labels
    const summaryRows = document.querySelectorAll('.summary-row');
    if (summaryRows[0]) {
      const labelEl = summaryRows[0].querySelector('span');
      if (labelEl) labelEl.textContent = this.t('products_total');
    }
    if (summaryRows[1]) {
      const labelEl = summaryRows[1].querySelector('span');
      if (labelEl) labelEl.textContent = this.t('delivery_cost');
    }
    if (summaryRows[2]) {
      const labelEl = summaryRows[2].querySelector('span');
      if (labelEl) labelEl.textContent = this.t('total');
    }
  }

  updateFreeDeliveryProgress() {
    const progressFill = document.getElementById('progressFill');
    const progressAmount = document.getElementById('progressAmount');

    const subtotal = this.cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    const freeDeliveryThreshold = 100;
    const progress = Math.min((subtotal / freeDeliveryThreshold) * 100, 100);
    const remaining = Math.max(freeDeliveryThreshold - subtotal, 0);

    if (progressFill) {
      progressFill.style.width = `${progress}%`;
    }

    if (progressAmount) {
      if (remaining > 0) {
        progressAmount.textContent = this.formatPrice(remaining);
        progressAmount.style.color = 'var(--color-organic-green)';
      } else {
        progressAmount.textContent = this.t('free') + '!';
        progressAmount.style.color = 'var(--color-organic-green)';
      }
    }
  }

  checkout() {
    if (this.cart.length === 0) return;
    
    alert(`Заказ оформлен! Общая сумма: ${this.formatPrice(this.getTotal())}`);
    this.cart = [];
    this.updateCartUI();
    this.closeCart();
    this.renderProducts();
  }

  getTotal() {
    const subtotal = this.cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    const deliveryFee = subtotal >= 100 ? 0 : 15;
    return subtotal + deliveryFee;
  }
}

// Initialize application
document.addEventListener('DOMContentLoaded', () => {
  console.log('DOM loaded, initializing app...');
  window.app = new AppState();
  
  // Smooth scroll for navigation
  document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
      e.preventDefault();
      const target = document.querySelector(this.getAttribute('href'));
      if (target) {
        target.scrollIntoView({
          behavior: 'smooth',
          block: 'start'
        });
      }
    });
  });
});

// Export for potential external use
if (typeof module !== 'undefined' && module.exports) {
  module.exports = { AppState, appData };
}
</file>

<file path="CartDrawer-improved.tsx">
'use client'

import React from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  Drawer,
  Box,
  Typography,
  IconButton,
  Button,
  Divider,
  Badge,
  LinearProgress
} from '@mui/material';
import {
  Close as CloseIcon,
  ShoppingCartOutlined as CartIcon,
  Add as AddIcon,
  Remove as RemoveIcon,
  Delete as DeleteIcon
} from '@mui/icons-material';
import { useSelector, useDispatch } from 'react-redux';
import { 
  selectCartItems, 
  selectCartTotal, 
  selectCartItemsCount,
  updateQuantity,
  removeFromCart,
  clearCart
} from './cartSlice';
import { formatPrice } from '../../../lib/utils';
import type { RootState } from '../../../app/store/store';

interface CartDrawerProps {
  open: boolean;
  onClose: () => void;
}

export const CartDrawer = ({ open, onClose }: CartDrawerProps) => {
  const dispatch = useDispatch();
  const items = useSelector(selectCartItems);
  const totalPrice = useSelector(selectCartTotal);
  const itemsCount = useSelector(selectCartItemsCount);

  // Прогресс до бесплатной доставки
  const freeShippingThreshold = 100;
  const shippingProgress = Math.min((totalPrice / freeShippingThreshold) * 100, 100);
  const remainingForFreeShipping = Math.max(0, freeShippingThreshold - totalPrice);

  const handleUpdateQuantity = (productId: number, newQuantity: number) => {
    dispatch(updateQuantity({ productId, quantity: newQuantity }));
  };

  const handleRemoveItem = (productId: number) => {
    dispatch(removeFromCart(productId));
  };

  const handleClearCart = () => {
    dispatch(clearCart());
  };

  return (
    <Drawer
      anchor="right"
      open={open}
      onClose={onClose}
      sx={{
        '& .MuiDrawer-paper': {
          width: { xs: '100vw', sm: 420 },
          maxWidth: 420,
        }
      }}
    >
      <Box sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
        {/* Заголовок */}
        <Box sx={{ 
          display: 'flex', 
          alignItems: 'center', 
          justifyContent: 'space-between',
          p: 3,
          borderBottom: '1px solid',
          borderColor: 'divider'
        }}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
            <Badge badgeContent={itemsCount} color="primary">
              <CartIcon color="primary" />
            </Badge>
            <Box>
              <Typography variant="h6" fontWeight="bold">
                Shopping Cart
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {itemsCount} {itemsCount === 1 ? 'item' : 'items'}
              </Typography>
            </Box>
          </Box>
          
          <IconButton onClick={onClose} sx={{ ml: 2 }}>
            <CloseIcon />
          </IconButton>
        </Box>

        {/* Прогресс до бесплатной доставки */}
        {totalPrice > 0 && remainingForFreeShipping > 0 && (
          <Box sx={{ p: 3, backgroundColor: '#f0fdf4' }}>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
              <Typography variant="body2" color="success.main" fontWeight="medium">
                Free shipping at {formatPrice(freeShippingThreshold)}
              </Typography>
              <Typography variant="body2" color="success.main" fontWeight="bold">
                {formatPrice(remainingForFreeShipping)} to go!
              </Typography>
            </Box>
            <LinearProgress 
              variant="determinate" 
              value={shippingProgress}
              sx={{
                height: 8,
                borderRadius: 4,
                backgroundColor: '#dcfce7',
                '& .MuiLinearProgress-bar': {
                  backgroundColor: '#22c55e',
                  borderRadius: 4
                }
              }}
            />
          </Box>
        )}

        {/* Содержимое корзины */}
        <Box sx={{ flex: 1, overflow: 'auto' }}>
          {items.length === 0 ? (
            // Пустая корзина
            <Box sx={{ 
              display: 'flex', 
              flexDirection: 'column', 
              alignItems: 'center', 
              justifyContent: 'center',
              height: '100%',
              p: 4,
              textAlign: 'center'
            }}>
              <Box sx={{ 
                width: 80, 
                height: 80, 
                borderRadius: '50%',
                backgroundColor: 'grey.100',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                mb: 3
              }}>
                <CartIcon sx={{ fontSize: 40, color: 'grey.400' }} />
              </Box>
              
              <Typography variant="h6" fontWeight="bold" gutterBottom>
                Your cart is empty
              </Typography>
              
              <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
                Add some fresh products to get started
              </Typography>
              
              <Button 
                variant="contained" 
                onClick={onClose}
                sx={{ 
                  backgroundColor: '#4ade80',
                  '&:hover': { backgroundColor: '#22c55e' }
                }}
              >
                Continue Shopping
              </Button>
            </Box>
          ) : (
            // Товары в корзине
            <Box sx={{ p: 2 }}>
              <AnimatePresence>
                {items.map((item, index) => (
                  <motion.div
                    key={item.product.id}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    exit={{ opacity: 0, x: 20 }}
                    transition={{ delay: index * 0.1 }}
                  >
                    <Box sx={{ 
                      display: 'flex', 
                      gap: 2, 
                      p: 2,
                      mb: 2,
                      backgroundColor: 'grey.50',
                      borderRadius: 2,
                      border: '1px solid',
                      borderColor: 'grey.200'
                    }}>
                      {/* Изображение */}
                      <Box sx={{ 
                        width: 60, 
                        height: 60, 
                        borderRadius: 1,
                        overflow: 'hidden',
                        flexShrink: 0
                      }}>
                        <img 
                          src={item.product.imageUrl?.replace('/src/assets/', '/assets/') || 'https://via.placeholder.com/60x60/4ade80/ffffff?text=Product'}
                          alt={item.product.title}
                          style={{ 
                            width: '100%', 
                            height: '100%', 
                            objectFit: 'cover' 
                          }}
                        />
                      </Box>

                      {/* Информация о товаре */}
                      <Box sx={{ flex: 1 }}>
                        <Typography variant="subtitle2" fontWeight="bold" gutterBottom>
                          {item.product.title}
                        </Typography>
                        
                        <Typography variant="body2" color="text.secondary" gutterBottom>
                          {item.product.farm.name}
                        </Typography>
                        
                        <Typography variant="h6" color="primary" fontWeight="bold">
                          {formatPrice(item.product.price)}
                        </Typography>

                        {/* Управление количеством */}
                        <Box sx={{ 
                          display: 'flex', 
                          alignItems: 'center', 
                          justifyContent: 'space-between',
                          mt: 1
                        }}>
                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                            <IconButton
                              size="small"
                              onClick={() => handleUpdateQuantity(item.product.id, item.quantity - 1)}
                              sx={{ 
                                width: 28, 
                                height: 28,
                                backgroundColor: 'white',
                                border: '1px solid',
                                borderColor: 'grey.300'
                              }}
                            >
                              <RemoveIcon fontSize="small" />
                            </IconButton>
                            
                            <Typography sx={{ minWidth: 30, textAlign: 'center', fontWeight: 'bold' }}>
                              {item.quantity}
                            </Typography>
                            
                            <IconButton
                              size="small"
                              onClick={() => handleUpdateQuantity(item.product.id, item.quantity + 1)}
                              sx={{ 
                                width: 28, 
                                height: 28,
                                backgroundColor: 'white',
                                border: '1px solid',
                                borderColor: 'grey.300'
                              }}
                            >
                              <AddIcon fontSize="small" />
                            </IconButton>
                          </Box>

                          <IconButton
                            size="small"
                            onClick={() => handleRemoveItem(item.product.id)}
                            sx={{ color: 'error.main' }}
                          >
                            <DeleteIcon fontSize="small" />
                          </IconButton>
                        </Box>
                      </Box>
                    </Box>
                  </motion.div>
                ))}
              </AnimatePresence>
            </Box>
          )}
        </Box>

        {/* Футер с итогами */}
        {items.length > 0 && (
          <Box sx={{ 
            p: 3, 
            borderTop: '1px solid',
            borderColor: 'divider',
            backgroundColor: 'grey.50'
          }}>
            {/* Итоговая сумма */}
            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>
              <Typography variant="body1">Subtotal:</Typography>
              <Typography variant="h6" fontWeight="bold">
                {formatPrice(totalPrice)}
              </Typography>
            </Box>

            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>
              <Typography variant="body1">Shipping:</Typography>
              <Typography variant="body1" color={remainingForFreeShipping === 0 ? 'success.main' : 'text.primary'}>
                {remainingForFreeShipping === 0 ? 'FREE!' : formatPrice(15)}
              </Typography>
            </Box>

            <Divider sx={{ mb: 2 }} />

            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>
              <Typography variant="h6" fontWeight="bold">Total:</Typography>
              <Typography variant="h6" fontWeight="bold" color="primary">
                {formatPrice(totalPrice + (remainingForFreeShipping === 0 ? 0 : 15))}
              </Typography>
            </Box>

            {/* Кнопки действий */}
            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
              <Button
                variant="contained"
                size="large"
                fullWidth
                sx={{ 
                  backgroundColor: '#4ade80',
                  '&:hover': { backgroundColor: '#22c55e' },
                  borderRadius: 2,
                  py: 1.5,
                  fontWeight: 'bold'
                }}
              >
                Checkout • {formatPrice(totalPrice + (remainingForFreeShipping === 0 ? 0 : 15))}
              </Button>
              
              <Button
                variant="outlined"
                color="error"
                onClick={handleClearCart}
                sx={{ borderRadius: 2 }}
              >
                Clear Cart
              </Button>
            </Box>
          </Box>
        )}
      </Box>
    </Drawer>
  );
};

export default CartDrawer;
</file>

<file path="CartDrawer.tsx">
'use client'

import { motion, AnimatePresence } from 'framer-motion'
import { X, Plus, Minus, ShoppingBag, Trash2, Gift } from 'lucide-react'
import { useAppSelector, useAppDispatch } from '@/lib/redux/hooks'
import { 
  closeCart, 
  selectCartItems, 
  selectCartTotal, 
  selectCartItemsCount,
  selectIsCartOpen,
  selectShippingCost,
  selectFinalTotal,
  updateQuantity,
  removeFromCart,
  clearCart
} from '@/lib/redux/cartSlice'
import { formatPrice } from '@/lib/utils'

export function CartDrawer() {
  const dispatch = useAppDispatch()
  const isOpen = useAppSelector(selectIsCartOpen)
  const items = useAppSelector(selectCartItems)
  const totalPrice = useAppSelector(selectCartTotal)
  const itemsCount = useAppSelector(selectCartItemsCount)
  const shippingCost = useAppSelector(selectShippingCost)
  const finalTotal = useAppSelector(selectFinalTotal)

  const handleUpdateQuantity = (id: string, quantity: number) => {
    dispatch(updateQuantity({ id, quantity }))
  }

  const handleRemoveItem = (id: string) => {
    dispatch(removeFromCart(id))
  }

  const handleCheckout = () => {
    // Логика оформления заказа
    console.log('Proceeding to checkout...')
  }

  const freeShippingThreshold = 100
  const progressToFreeShipping = (totalPrice / freeShippingThreshold) * 100

  return (
    <AnimatePresence>
      {isOpen && (
        <>
          {/* Оверлей */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={() => dispatch(closeCart())}
            className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50"
          />

          {/* Панель корзины */}
          <motion.div
            initial={{ x: '100%' }}
            animate={{ x: 0 }}
            exit={{ x: '100%' }}
            transition={{ type: 'tween', duration: 0.3 }}
            className="fixed right-0 top-0 h-full w-full max-w-md bg-white dark:bg-gray-900 shadow-2xl z-50 flex flex-col"
          >
            {/* Заголовок */}
            <div className="flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-green-100 dark:bg-green-900/30 rounded-lg">
                  <ShoppingBag className="w-5 h-5 text-green-600 dark:text-green-400" />
                </div>
                <div>
                  <h2 className="text-lg font-semibold text-gray-900 dark:text-white">
                    Shopping Cart
                  </h2>
                  <p className="text-sm text-gray-500 dark:text-gray-400">
                    {itemsCount} {itemsCount === 1 ? 'item' : 'items'}
                  </p>
                </div>
              </div>
              <button
                onClick={() => dispatch(closeCart())}
                className="p-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg transition-colors"
              >
                <X className="w-5 h-5 text-gray-500 dark:text-gray-400" />
              </button>
            </div>

            {/* Прогресс до бесплатной доставки */}
            {totalPrice > 0 && shippingCost > 0 && (
              <div className="p-4 bg-green-50 dark:bg-green-900/20 border-b border-green-100 dark:border-green-800">
                <div className="flex items-center justify-between text-sm mb-2">
                  <span className="text-green-700 dark:text-green-300">
                    Free shipping at ₪{freeShippingThreshold}
                  </span>
                  <span className="font-semibold text-green-700 dark:text-green-300">
                    ₪{Math.max(0, freeShippingThreshold - totalPrice)} left
                  </span>
                </div>
                <div className="w-full bg-green-200 dark:bg-green-800 rounded-full h-2">
                  <motion.div
                    initial={{ width: 0 }}
                    animate={{ width: `${Math.min(progressToFreeShipping, 100)}%` }}
                    className="bg-green-500 h-2 rounded-full transition-all duration-500"
                  />
                </div>
              </div>
            )}

            {/* Содержимое корзины */}
            <div className="flex-1 overflow-y-auto">
              {items.length === 0 ? (
                <div className="flex flex-col items-center justify-center h-full p-8 text-center">
                  <div className="w-20 h-20 bg-gray-100 dark:bg-gray-800 rounded-full flex items-center justify-center mb-4">
                    <ShoppingBag className="w-8 h-8 text-gray-400" />
                  </div>
                  <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
                    Your cart is empty
                  </h3>
                  <p className="text-gray-500 dark:text-gray-400 mb-6">
                    Add some fresh products to get started
                  </p>
                  <button
                    onClick={() => dispatch(closeCart())}
                    className="px-6 py-3 bg-green-500 hover:bg-green-600 text-white rounded-xl font-semibold transition-colors"
                  >
                    Continue Shopping
                  </button>
                </div>
              ) : (
                <div className="p-4 space-y-4">
                  <AnimatePresence>
                    {items.map((item, index) => (
                      <motion.div
                        key={item.id}
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        exit={{ opacity: 0, x: -100 }}
                        transition={{ delay: index * 0.05 }}
                        className="flex items-center gap-4 p-4 bg-gray-50 dark:bg-gray-800 rounded-xl"
                      >
                        {/* Изображение товара */}
                        <div className="w-16 h-16 bg-gray-200 dark:bg-gray-700 rounded-lg overflow-hidden flex-shrink-0">
                          <img
                            src={item.image}
                            alt={item.name}
                            className="w-full h-full object-cover"
                          />
                        </div>

                        {/* Информация о товаре */}
                        <div className="flex-1 min-w-0">
                          <h4 className="font-semibold text-gray-900 dark:text-white truncate">
                            {item.name}
                          </h4>
                          <p className="text-sm text-gray-500 dark:text-gray-400">
                            by {item.farmer}
                          </p>
                          <p className="text-lg font-bold text-green-600 dark:text-green-400">
                            {formatPrice(item.price)}
                          </p>
                        </div>

                        {/* Управление количеством */}
                        <div className="flex flex-col items-end gap-2">
                          <div className="flex items-center gap-2">
                            <button
                              onClick={() => handleUpdateQuantity(item.id, item.quantity - 1)}
                              className="p-1 hover:bg-gray-200 dark:hover:bg-gray-700 rounded transition-colors"
                            >
                              <Minus className="w-4 h-4" />
                            </button>
                            <span className="w-8 text-center font-semibold">
                              {item.quantity}
                            </span>
                            <button
                              onClick={() => handleUpdateQuantity(item.id, item.quantity + 1)}
                              className="p-1 hover:bg-gray-200 dark:hover:bg-gray-700 rounded transition-colors"
                            >
                              <Plus className="w-4 h-4" />
                            </button>
                          </div>
                          <button
                            onClick={() => handleRemoveItem(item.id)}
                            className="p-1 text-red-500 hover:bg-red-50 dark:hover:bg-red-900/20 rounded transition-colors"
                          >
                            <Trash2 className="w-4 h-4" />
                          </button>
                        </div>
                      </motion.div>
                    ))}
                  </AnimatePresence>

                  {/* Промокод */}
                  <div className="mt-6 p-4 border border-dashed border-gray-300 dark:border-gray-600 rounded-xl">
                    <div className="flex items-center gap-2 mb-2">
                      <Gift className="w-4 h-4 text-gray-500" />
                      <span className="text-sm font-semibold text-gray-700 dark:text-gray-300">
                        Promo Code
                      </span>
                    </div>
                    <div className="flex gap-2">
                      <input
                        type="text"
                        placeholder="Enter code"
                        className="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-green-500 dark:bg-gray-800"
                      />
                      <button className="px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg text-sm font-semibold hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors">
                        Apply
                      </button>
                    </div>
                  </div>
                </div>
              )}
            </div>

            {/* Итоги и оформление заказа */}
            {items.length > 0 && (
              <div className="border-t border-gray-200 dark:border-gray-700 p-6 space-y-4">
                {/* Расчеты */}
                <div className="space-y-2">
                  <div className="flex justify-between text-sm">
                    <span className="text-gray-600 dark:text-gray-400">Subtotal</span>
                    <span className="font-semibold">{formatPrice(totalPrice)}</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span className="text-gray-600 dark:text-gray-400">Shipping</span>
                    <span className="font-semibold">
                      {shippingCost === 0 ? (
                        <span className="text-green-600 dark:text-green-400">Free!</span>
                      ) : (
                        formatPrice(shippingCost)
                      )}
                    </span>
                  </div>
                  <div className="border-t border-gray-200 dark:border-gray-700 pt-2">
                    <div className="flex justify-between text-lg font-bold">
                      <span>Total</span>
                      <span className="text-green-600 dark:text-green-400">
                        {formatPrice(finalTotal)}
                      </span>
                    </div>
                  </div>
                </div>

                {/* Кнопки действий */}
                <div className="space-y-3">
                  <motion.button
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                    onClick={handleCheckout}
                    className="w-full py-4 bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white rounded-xl font-semibold shadow-lg transition-all duration-200"
                  >
                    Checkout • {formatPrice(finalTotal)}
                  </motion.button>
                  <button
                    onClick={() => dispatch(clearCart())}
                    className="w-full py-2 text-red-500 hover:text-red-600 text-sm font-semibold transition-colors"
                  >
                    Clear Cart
                  </button>
                </div>
              </div>
            )}
          </motion.div>
        </>
      )}
    </AnimatePresence>
  )
}
</file>

<file path="cartSlice.ts">
import { createSlice, PayloadAction } from '@reduxjs/toolkit'
import { CartItem } from '@/types'

interface CartState {
  items: CartItem[]
  isOpen: boolean
  totalItems: number
  totalPrice: number
  lastAddedItem?: CartItem
  shippingCost: number
  freeShippingThreshold: number
}

const initialState: CartState = {
  items: [],
  isOpen: false,
  totalItems: 0,
  totalPrice: 0,
  shippingCost: 15, // ₪15 доставка
  freeShippingThreshold: 100, // Бесплатная доставка от ₪100
}

const cartSlice = createSlice({
  name: 'cart',
  initialState,
  reducers: {
    addToCart: (state, action: PayloadAction<Omit<CartItem, 'quantity'> & { quantity?: number }>) => {
      const { quantity = 1, ...item } = action.payload
      const existingItem = state.items.find(cartItem => cartItem.id === item.id)
      
      if (existingItem) {
        existingItem.quantity += quantity
        // Проверяем лимит
        if (existingItem.maxQuantity && existingItem.quantity > existingItem.maxQuantity) {
          existingItem.quantity = existingItem.maxQuantity
        }
      } else {
        state.items.push({ ...item, quantity })
      }
      
      state.lastAddedItem = { ...item, quantity }
      cartSlice.caseReducers.updateTotals(state)
    },

    removeFromCart: (state, action: PayloadAction<string>) => {
      state.items = state.items.filter(item => item.id !== action.payload)
      cartSlice.caseReducers.updateTotals(state)
    },

    updateQuantity: (state, action: PayloadAction<{ id: string; quantity: number }>) => {
      const { id, quantity } = action.payload
      const item = state.items.find(cartItem => cartItem.id === id)
      
      if (item) {
        if (quantity <= 0) {
          state.items = state.items.filter(cartItem => cartItem.id !== id)
        } else {
          // Проверяем лимит
          if (item.maxQuantity && quantity > item.maxQuantity) {
            item.quantity = item.maxQuantity
          } else {
            item.quantity = quantity
          }
        }
      }
      
      cartSlice.caseReducers.updateTotals(state)
    },

    clearCart: (state) => {
      state.items = []
      state.totalItems = 0
      state.totalPrice = 0
      state.lastAddedItem = undefined
    },

    toggleCart: (state) => {
      state.isOpen = !state.isOpen
    },

    openCart: (state) => {
      state.isOpen = true
    },

    closeCart: (state) => {
      state.isOpen = false
    },

    updateTotals: (state) => {
      state.totalItems = state.items.reduce((total, item) => total + item.quantity, 0)
      state.totalPrice = state.items.reduce((total, item) => total + (item.price * item.quantity), 0)
    },

    // Применение промокода
    applyPromoCode: (state, action: PayloadAction<{ code: string; discount: number }>) => {
      // Логика применения промокода
      const { discount } = action.payload
      state.totalPrice = Math.max(0, state.totalPrice * (1 - discount / 100))
    },
  },
})

export const {
  addToCart,
  removeFromCart,
  updateQuantity,
  clearCart,
  toggleCart,
  openCart,
  closeCart,
  updateTotals,
  applyPromoCode,
} = cartSlice.actions

// Селекторы
export const selectCartItems = (state: { cart: CartState }) => state.cart.items
export const selectCartTotal = (state: { cart: CartState }) => state.cart.totalPrice
export const selectCartItemsCount = (state: { cart: CartState }) => state.cart.totalItems
export const selectIsCartOpen = (state: { cart: CartState }) => state.cart.isOpen
export const selectLastAddedItem = (state: { cart: CartState }) => state.cart.lastAddedItem
export const selectShippingCost = (state: { cart: CartState }) => {
  const { totalPrice, shippingCost, freeShippingThreshold } = state.cart
  return totalPrice >= freeShippingThreshold ? 0 : shippingCost
}
export const selectFinalTotal = (state: { cart: CartState }) => {
  const shippingCost = selectShippingCost(state)
  return state.cart.totalPrice + shippingCost
}

export default cartSlice.reducer
</file>

<file path="Header-improved.tsx">
'use client'

import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  AppBar,
  Toolbar,
  Box,
  IconButton,
  InputBase,
  Badge,
  Menu,
  MenuItem,
  Button,
  useMediaQuery,
  useTheme
} from '@mui/material';
import {
  Search as SearchIcon,
  ShoppingCartOutlined as CartIcon,
  PersonOutline as UserIcon,
  Language as LanguageIcon,
  DarkMode as DarkModeIcon,
  LightMode as LightModeIcon,
  Close as CloseIcon,
  Eco as EcoIcon
} from '@mui/icons-material';
import { useSelector } from 'react-redux';
import { useTranslation } from 'react-i18next';
import { selectCartItemsCount } from '../../../features/cart/model/cartSlice';
import { CartDrawer } from '../../../features/cart/ui/CartDrawer';

export const Header = () => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const { t, i18n } = useTranslation();
  
  const [isSearchOpen, setIsSearchOpen] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [cartOpen, setCartOpen] = useState(false);
  const [languageAnchor, setLanguageAnchor] = useState<null | HTMLElement>(null);
  
  const cartItemsCount = useSelector(selectCartItemsCount);

  const languages = [
    { code: 'en', name: 'English', flag: '🇺🇸' },
    { code: 'he', name: 'עברית', flag: '🇮🇱' },
    { code: 'ar', name: 'العربية', flag: '🇸🇦' },
    { code: 'ru', name: 'Русский', flag: '🇷🇺' },
  ];

  const handleSearchSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (searchQuery.trim()) {
      console.log('Search for:', searchQuery);
      // Здесь будет логика поиска
    }
  };

  const handleLanguageChange = (langCode: string) => {
    i18n.changeLanguage(langCode);
    setLanguageAnchor(null);
  };

  return (
    <>
      <AppBar 
        position="sticky" 
        elevation={0}
        sx={{
          backgroundColor: 'rgba(255, 255, 255, 0.95)',
          backdropFilter: 'blur(10px)',
          borderBottom: '1px solid',
          borderColor: 'divider',
          color: 'text.primary'
        }}
      >
        <Toolbar sx={{ justifyContent: 'space-between', py: 1 }}>
          {/* Логотип */}
          <motion.div
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, cursor: 'pointer' }}>
              <Box sx={{
                width: 36,
                height: 36,
                borderRadius: 2,
                background: 'linear-gradient(135deg, #4ade80, #22c55e)',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center'
              }}>
                <EcoIcon sx={{ color: 'white', fontSize: 20 }} />
              </Box>
              <Box sx={{ fontWeight: 'bold', fontSize: '1.5rem', color: 'primary.main' }}>
                FarmSharing
              </Box>
            </Box>
          </motion.div>

          {/* Навигация для десктопа */}
          {!isMobile && (
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 4 }}>
              <Button sx={{ color: 'text.primary', fontWeight: 500 }}>Home</Button>
              <Button sx={{ color: 'text.primary', fontWeight: 500 }}>Products</Button>
              <Button sx={{ color: 'text.primary', fontWeight: 500 }}>Farmers</Button>
              <Button sx={{ color: 'text.primary', fontWeight: 500 }}>About</Button>
            </Box>
          )}

          {/* Действия в хедере */}
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            {/* Поиск */}
            <Box sx={{ position: 'relative' }}>
              <AnimatePresence>
                {isSearchOpen ? (
                  <motion.form
                    initial={{ width: 0, opacity: 0 }}
                    animate={{ width: isMobile ? 250 : 300, opacity: 1 }}
                    exit={{ width: 0, opacity: 0 }}
                    transition={{ duration: 0.3, ease: "easeInOut" }}
                    onSubmit={handleSearchSubmit}
                    style={{ display: 'flex', alignItems: 'center' }}
                  >
                    <InputBase
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      placeholder="Search products, farms..."
                      autoFocus
                      sx={{
                        width: '100%',
                        px: 2,
                        py: 1,
                        backgroundColor: 'grey.100',
                        borderRadius: 3,
                        fontSize: '0.9rem'
                      }}
                      onBlur={() => {
                        if (!searchQuery) {
                          setTimeout(() => setIsSearchOpen(false), 200);
                        }
                      }}
                    />
                    <IconButton 
                      onClick={() => {
                        setIsSearchOpen(false);
                        setSearchQuery('');
                      }}
                      sx={{ ml: 1, p: 0.5 }}
                    >
                      <CloseIcon fontSize="small" />
                    </IconButton>
                  </motion.form>
                ) : (
                  <motion.div
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.9 }}
                  >
                    <IconButton 
                      onClick={() => setIsSearchOpen(true)}
                      sx={{ color: 'text.secondary' }}
                    >
                      <SearchIcon />
                    </IconButton>
                  </motion.div>
                )}
              </AnimatePresence>
            </Box>

            {/* Переключатель языка */}
            <IconButton
              onClick={(e) => setLanguageAnchor(e.currentTarget)}
              sx={{ color: 'text.secondary' }}
            >
              <LanguageIcon />
            </IconButton>

            <Menu
              anchorEl={languageAnchor}
              open={Boolean(languageAnchor)}
              onClose={() => setLanguageAnchor(null)}
              PaperProps={{
                sx: { borderRadius: 2, mt: 1 }
              }}
            >
              {languages.map((lang) => (
                <MenuItem
                  key={lang.code}
                  onClick={() => handleLanguageChange(lang.code)}
                  selected={i18n.language === lang.code}
                  sx={{ gap: 2, minWidth: 150 }}
                >
                  <span>{lang.flag}</span>
                  <span>{lang.name}</span>
                </MenuItem>
              ))}
            </Menu>

            {/* Переключатель темы */}
            <IconButton sx={{ color: 'text.secondary' }}>
              <LightModeIcon />
            </IconButton>

            {/* Профиль */}
            <IconButton sx={{ color: 'text.secondary' }}>
              <UserIcon />
            </IconButton>

            {/* Корзина */}
            <motion.div
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.9 }}
            >
              <IconButton 
                onClick={() => setCartOpen(true)}
                sx={{ color: 'text.secondary' }}
              >
                <Badge 
                  badgeContent={cartItemsCount} 
                  color="primary"
                  sx={{
                    '& .MuiBadge-badge': {
                      backgroundColor: '#4ade80',
                      color: 'white'
                    }
                  }}
                >
                  <CartIcon />
                </Badge>
              </IconButton>
            </motion.div>

            {/* Кнопка "Продать" */}
            {!isMobile && (
              <motion.div
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                <Button
                  variant="contained"
                  sx={{
                    background: 'linear-gradient(135deg, #4ade80, #22c55e)',
                    borderRadius: 3,
                    px: 3,
                    py: 1,
                    fontWeight: 'bold',
                    textTransform: 'none',
                    boxShadow: '0 4px 12px rgba(34, 197, 94, 0.3)',
                    '&:hover': {
                      background: 'linear-gradient(135deg, #22c55e, #16a34a)',
                      boxShadow: '0 6px 16px rgba(34, 197, 94, 0.4)',
                    }
                  }}
                >
                  Sell Products
                </Button>
              </motion.div>
            )}
          </Box>
        </Toolbar>
      </AppBar>

      {/* Корзина */}
      <CartDrawer 
        open={cartOpen} 
        onClose={() => setCartOpen(false)} 
      />
    </>
  );
};

export default Header;
</file>

<file path="Header.tsx">
'use client'

import { useState, useRef, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { 
  Search, 
  ShoppingCart, 
  User, 
  Moon, 
  Sun, 
  Globe, 
  DollarSign,
  Menu,
  X,
  Sprout
} from 'lucide-react'
import { useAppSelector, useAppDispatch } from '@/lib/redux/hooks'
import { toggleCart, selectCartItemsCount } from '@/lib/redux/cartSlice'
import { toggleTheme, selectTheme } from '@/lib/redux/themeSlice'
import { setLanguage, setCurrency, selectLanguage, selectCurrency } from '@/lib/redux/userSlice'
import { cn } from '@/lib/utils'

export function Header() {
  const [isSearchOpen, setIsSearchOpen] = useState(false)
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false)
  const [searchQuery, setSearchQuery] = useState('')
  const searchInputRef = useRef<HTMLInputElement>(null)
  
  const dispatch = useAppDispatch()
  const cartItemsCount = useAppSelector(selectCartItemsCount)
  const theme = useAppSelector(selectTheme)
  const language = useAppSelector(selectLanguage)
  const currency = useAppSelector(selectCurrency)

  // Языки
  const languages = [
    { code: 'en', name: 'English', flag: '🇺🇸' },
    { code: 'he', name: 'עברית', flag: '🇮🇱' },
    { code: 'ar', name: 'العربية', flag: '🇸🇦' },
    { code: 'ru', name: 'Русский', flag: '🇷🇺' },
  ]

  // Валюты
  const currencies = [
    { code: 'ILS', symbol: '₪', name: 'Israeli Shekel' },
    { code: 'USD', symbol: '$', name: 'US Dollar' },
    { code: 'EUR', symbol: '€', name: 'Euro' },
  ]

  // Фокус на поиск при открытии
  useEffect(() => {
    if (isSearchOpen && searchInputRef.current) {
      searchInputRef.current.focus()
    }
  }, [isSearchOpen])

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault()
    if (searchQuery.trim()) {
      // Логика поиска
      console.log('Searching for:', searchQuery)
      setIsSearchOpen(false)
      setSearchQuery('')
    }
  }

  return (
    <header className="sticky top-0 z-50 w-full border-b border-gray-200 dark:border-gray-800 bg-white/80 dark:bg-gray-900/80 backdrop-blur-lg">
      <div className="container mx-auto px-4">
        <div className="flex items-center justify-between h-16">
          
          {/* Логотип */}
          <motion.div 
            className="flex items-center space-x-2"
            whileHover={{ scale: 1.05 }}
          >
            <div className="w-8 h-8 bg-gradient-to-r from-green-500 to-green-600 rounded-lg flex items-center justify-center">
              <Sprout className="w-5 h-5 text-white" />
            </div>
            <span className="text-xl font-bold text-gray-900 dark:text-white">
              FarmSharing
            </span>
          </motion.div>

          {/* Навигация для десктопа */}
          <nav className="hidden md:flex items-center space-x-8">
            <a href="/" className="text-gray-700 dark:text-gray-300 hover:text-green-600 dark:hover:text-green-400 transition-colors">
              Home
            </a>
            <a href="/marketplace" className="text-gray-700 dark:text-gray-300 hover:text-green-600 dark:hover:text-green-400 transition-colors">
              Marketplace
            </a>
            <a href="/farmers" className="text-gray-700 dark:text-gray-300 hover:text-green-600 dark:hover:text-green-400 transition-colors">
              Farmers
            </a>
            <a href="/about" className="text-gray-700 dark:text-gray-300 hover:text-green-600 dark:hover:text-green-400 transition-colors">
              About
            </a>
          </nav>

          {/* Действия в хедере */}
          <div className="flex items-center space-x-4">
            
            {/* Поиск */}
            <div className="relative">
              <AnimatePresence>
                {isSearchOpen ? (
                  <motion.form
                    initial={{ width: 0, opacity: 0 }}
                    animate={{ width: 300, opacity: 1 }}
                    exit={{ width: 0, opacity: 0 }}
                    transition={{ duration: 0.3, ease: "easeInOut" }}
                    className="flex items-center"
                    onSubmit={handleSearch}
                  >
                    <input
                      ref={searchInputRef}
                      type="text"
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      placeholder="Search products, farmers..."
                      className="w-full px-4 py-2 bg-gray-100 dark:bg-gray-800 rounded-full text-sm focus:outline-none focus:ring-2 focus:ring-green-500"
                      onBlur={() => setTimeout(() => setIsSearchOpen(false), 200)}
                    />
                    <button
                      type="button"
                      onClick={() => setIsSearchOpen(false)}
                      className="ml-2 p-1 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
                    >
                      <X className="w-4 h-4" />
                    </button>
                  </motion.form>
                ) : (
                  <motion.button
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.9 }}
                    onClick={() => setIsSearchOpen(true)}
                    className="p-2 text-gray-600 dark:text-gray-400 hover:text-green-600 dark:hover:text-green-400 transition-colors"
                  >
                    <Search className="w-5 h-5" />
                  </motion.button>
                )}
              </AnimatePresence>
            </div>

            {/* Выбор языка */}
            <div className="relative group">
              <button className="p-2 text-gray-600 dark:text-gray-400 hover:text-green-600 dark:hover:text-green-400 transition-colors">
                <Globe className="w-5 h-5" />
              </button>
              <div className="absolute right-0 top-full mt-2 w-48 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200">
                {languages.map((lang) => (
                  <button
                    key={lang.code}
                    onClick={() => dispatch(setLanguage(lang.code as any))}
                    className={cn(
                      "w-full flex items-center px-4 py-2 text-sm hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors",
                      language === lang.code && "bg-green-50 dark:bg-green-900/20 text-green-600 dark:text-green-400"
                    )}
                  >
                    <span className="mr-3">{lang.flag}</span>
                    {lang.name}
                  </button>
                ))}
              </div>
            </div>

            {/* Выбор валюты */}
            <div className="relative group">
              <button className="p-2 text-gray-600 dark:text-gray-400 hover:text-green-600 dark:hover:text-green-400 transition-colors">
                <DollarSign className="w-5 h-5" />
              </button>
              <div className="absolute right-0 top-full mt-2 w-40 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200">
                {currencies.map((curr) => (
                  <button
                    key={curr.code}
                    onClick={() => dispatch(setCurrency(curr.code as any))}
                    className={cn(
                      "w-full flex items-center px-4 py-2 text-sm hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors",
                      currency === curr.code && "bg-green-50 dark:bg-green-900/20 text-green-600 dark:text-green-400"
                    )}
                  >
                    <span className="mr-3">{curr.symbol}</span>
                    {curr.name}
                  </button>
                ))}
              </div>
            </div>

            {/* Переключатель темы */}
            <motion.button
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.9 }}
              onClick={() => dispatch(toggleTheme())}
              className="p-2 text-gray-600 dark:text-gray-400 hover:text-green-600 dark:hover:text-green-400 transition-colors"
            >
              {theme === 'dark' ? (
                <Sun className="w-5 h-5" />
              ) : (
                <Moon className="w-5 h-5" />
              )}
            </motion.button>

            {/* Профиль */}
            <motion.button
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.9 }}
              className="p-2 text-gray-600 dark:text-gray-400 hover:text-green-600 dark:hover:text-green-400 transition-colors"
            >
              <User className="w-5 h-5" />
            </motion.button>

            {/* Корзина */}
            <motion.button
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.9 }}
              onClick={() => dispatch(toggleCart())}
              className="relative p-2 text-gray-600 dark:text-gray-400 hover:text-green-600 dark:hover:text-green-400 transition-colors"
            >
              <ShoppingCart className="w-5 h-5" />
              {cartItemsCount > 0 && (
                <motion.span
                  initial={{ scale: 0 }}
                  animate={{ scale: 1 }}
                  className="absolute -top-1 -right-1 w-5 h-5 bg-red-500 text-white text-xs rounded-full flex items-center justify-center font-semibold"
                >
                  {cartItemsCount > 99 ? '99+' : cartItemsCount}
                </motion.span>
              )}
            </motion.button>

            {/* Кнопка "Продать" */}
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              className="hidden sm:inline-flex px-4 py-2 bg-gradient-to-r from-green-500 to-green-600 text-white rounded-full font-semibold text-sm hover:from-green-600 hover:to-green-700 transition-all duration-200 shadow-lg hover:shadow-green-200 dark:hover:shadow-green-800"
            >
              Sell Products
            </motion.button>

            {/* Мобильное меню */}
            <button
              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
              className="md:hidden p-2 text-gray-600 dark:text-gray-400"
            >
              {isMobileMenuOpen ? (
                <X className="w-5 h-5" />
              ) : (
                <Menu className="w-5 h-5" />
              )}
            </button>
          </div>
        </div>

        {/* Мобильное меню */}
        <AnimatePresence>
          {isMobileMenuOpen && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              className="md:hidden border-t border-gray-200 dark:border-gray-800"
            >
              <nav className="py-4 space-y-2">
                <a href="/" className="block px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-800 rounded-lg">
                  Home
                </a>
                <a href="/marketplace" className="block px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-800 rounded-lg">
                  Marketplace
                </a>
                <a href="/farmers" className="block px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-800 rounded-lg">
                  Farmers
                </a>
                <a href="/about" className="block px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-800 rounded-lg">
                  About
                </a>
                <button className="w-full text-left px-4 py-2 bg-gradient-to-r from-green-500 to-green-600 text-white rounded-lg font-semibold">
                  Sell Products
                </button>
              </nav>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </header>
  )
}
</file>

<file path="HeroSection.tsx">
'use client'

import { motion } from 'framer-motion'
import { ArrowRight, Leaf, Heart, Star, MapPin } from 'lucide-react'
import { useRouter } from 'next/navigation'

export function HeroSection() {
  const router = useRouter()

  const fadeInUp = {
    initial: { opacity: 0, y: 60 },
    animate: { opacity: 1, y: 0 },
    transition: { duration: 0.6, ease: "easeOut" }
  }

  const staggerContainer = {
    animate: {
      transition: {
        staggerChildren: 0.1
      }
    }
  }

  return (
    <section className="relative min-h-screen flex items-center justify-center overflow-hidden bg-gradient-to-br from-green-50 via-white to-green-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900">
      
      {/* Фоновые элементы */}
      <div className="absolute inset-0">
        {/* Органические формы */}
        <motion.div
          animate={{ 
            rotate: [0, 360],
            scale: [1, 1.1, 1]
          }}
          transition={{ 
            duration: 20, 
            repeat: Infinity, 
            ease: "linear" 
          }}
          className="absolute -top-20 -right-20 w-96 h-96 bg-gradient-to-br from-green-200/30 to-green-400/30 rounded-full blur-3xl"
        />
        <motion.div
          animate={{ 
            rotate: [360, 0],
            scale: [1, 1.2, 1]
          }}
          transition={{ 
            duration: 25, 
            repeat: Infinity, 
            ease: "linear" 
          }}
          className="absolute -bottom-20 -left-20 w-80 h-80 bg-gradient-to-br from-orange-200/30 to-orange-400/30 rounded-full blur-3xl"
        />
        
        {/* Паттерн */}
        <div className="absolute inset-0 bg-hero-pattern opacity-40" />
      </div>

      <div className="container mx-auto px-4 relative z-10">
        <div className="flex flex-col lg:flex-row items-center justify-between gap-12">
          
          {/* Левая часть - Контент */}
          <motion.div 
            className="flex-1 text-center lg:text-left"
            variants={staggerContainer}
            initial="initial"
            animate="animate"
          >
            {/* Значок "Fresh" */}
            <motion.div
              variants={fadeInUp}
              className="inline-flex items-center gap-2 px-4 py-2 bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300 rounded-full text-sm font-semibold mb-6"
            >
              <Leaf className="w-4 h-4" />
              100% Fresh & Organic
            </motion.div>

            {/* Заголовок */}
            <motion.h1
              variants={fadeInUp}
              className="text-5xl md:text-6xl lg:text-7xl font-bold mb-6"
            >
              <span className="text-gray-900 dark:text-white">Fresh from</span>
              <br />
              <span className="text-gradient bg-gradient-to-r from-green-600 to-green-500 bg-clip-text text-transparent">
                farm to table
              </span>
            </motion.h1>

            {/* Подзаголовок */}
            <motion.p
              variants={fadeInUp}
              className="text-xl md:text-2xl text-gray-600 dark:text-gray-300 mb-8 max-w-2xl"
            >
              Connect directly with local Israeli farmers. Get the freshest products with the best prices, straight from the source.
            </motion.p>

            {/* Статистика */}
            <motion.div
              variants={fadeInUp}
              className="flex flex-wrap justify-center lg:justify-start gap-8 mb-8"
            >
              <div className="text-center">
                <div className="text-3xl font-bold text-green-600 dark:text-green-400">500+</div>
                <div className="text-sm text-gray-600 dark:text-gray-400">Local Farms</div>
              </div>
              <div className="text-center">
                <div className="text-3xl font-bold text-green-600 dark:text-green-400">10k+</div>
                <div className="text-sm text-gray-600 dark:text-gray-400">Happy Customers</div>
              </div>
              <div className="text-center">
                <div className="text-3xl font-bold text-green-600 dark:text-green-400">24h</div>
                <div className="text-sm text-gray-600 dark:text-gray-400">Delivery</div>
              </div>
            </motion.div>

            {/* Кнопки действий */}
            <motion.div
              variants={fadeInUp}
              className="flex flex-col sm:flex-row gap-4 justify-center lg:justify-start"
            >
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => router.push('/marketplace')}
                className="group px-8 py-4 bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white rounded-2xl font-semibold text-lg shadow-lg hover:shadow-green-200 dark:hover:shadow-green-800 transition-all duration-300 flex items-center justify-center gap-2"
              >
                Shop Fresh Products
                <ArrowRight className="w-5 h-5 group-hover:translate-x-1 transition-transform" />
              </motion.button>
              
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                className="px-8 py-4 bg-white dark:bg-gray-800 text-green-600 dark:text-green-400 border-2 border-green-500 rounded-2xl font-semibold text-lg hover:bg-green-50 dark:hover:bg-green-900/20 transition-all duration-300"
              >
                Become a Seller
              </motion.button>
            </motion.div>

            {/* Отзывы */}
            <motion.div
              variants={fadeInUp}
              className="mt-12 flex items-center justify-center lg:justify-start gap-6"
            >
              <div className="flex -space-x-3">
                {[...Array(5)].map((_, i) => (
                  <div key={i} className="w-10 h-10 rounded-full bg-gradient-to-br from-green-400 to-green-600 border-2 border-white dark:border-gray-800 flex items-center justify-center text-white font-semibold text-sm">
                    {String.fromCharCode(65 + i)}
                  </div>
                ))}
              </div>
              <div>
                <div className="flex items-center gap-1">
                  {[...Array(5)].map((_, i) => (
                    <Star key={i} className="w-4 h-4 fill-yellow-400 text-yellow-400" />
                  ))}
                  <span className="ml-2 text-sm font-semibold text-gray-700 dark:text-gray-300">4.9</span>
                </div>
                <p className="text-sm text-gray-600 dark:text-gray-400">From 2,000+ reviews</p>
              </div>
            </motion.div>
          </motion.div>

          {/* Правая часть - Визуализация */}
          <motion.div
            initial={{ opacity: 0, x: 60 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.8, delay: 0.2 }}
            className="flex-1 relative"
          >
            <div className="relative max-w-lg mx-auto">
              
              {/* Главное изображение */}
              <motion.div
                animate={{ y: [-10, 10, -10] }}
                transition={{ duration: 4, repeat: Infinity, ease: "easeInOut" }}
                className="relative z-10"
              >
                <div className="w-80 h-80 mx-auto bg-gradient-to-br from-green-400 to-green-600 rounded-3xl shadow-2xl overflow-hidden">
                  {/* Здесь будет изображение фермерских продуктов */}
                  <div className="w-full h-full bg-gradient-to-br from-green-400/90 to-green-600/90 flex items-center justify-center">
                    <div className="text-center text-white">
                      <Leaf className="w-16 h-16 mx-auto mb-4" />
                      <p className="text-xl font-semibold">Fresh Vegetables</p>
                      <p className="text-sm opacity-90">From Local Farms</p>
                    </div>
                  </div>
                </div>
              </motion.div>

              {/* Плавающие карточки */}
              <motion.div
                animate={{ 
                  rotate: [0, 5, 0],
                  y: [-5, 5, -5]
                }}
                transition={{ duration: 3, repeat: Infinity, ease: "easeInOut" }}
                className="absolute -top-8 -left-8 z-20"
              >
                <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-4 border border-green-100 dark:border-green-900">
                  <div className="flex items-center gap-3">
                    <div className="w-12 h-12 bg-gradient-to-br from-orange-400 to-orange-600 rounded-full flex items-center justify-center">
                      <Heart className="w-6 h-6 text-white" />
                    </div>
                    <div>
                      <p className="font-semibold text-gray-900 dark:text-white">Organic</p>
                      <p className="text-sm text-gray-600 dark:text-gray-400">Certified</p>
                    </div>
                  </div>
                </div>
              </motion.div>

              <motion.div
                animate={{ 
                  rotate: [0, -5, 0],
                  y: [5, -5, 5]
                }}
                transition={{ duration: 3.5, repeat: Infinity, ease: "easeInOut" }}
                className="absolute -bottom-8 -right-8 z-20"
              >
                <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-4 border border-green-100 dark:border-green-900">
                  <div className="flex items-center gap-3">
                    <div className="w-12 h-12 bg-gradient-to-br from-blue-400 to-blue-600 rounded-full flex items-center justify-center">
                      <MapPin className="w-6 h-6 text-white" />
                    </div>
                    <div>
                      <p className="font-semibold text-gray-900 dark:text-white">Local</p>
                      <p className="text-sm text-gray-600 dark:text-gray-400">5km away</p>
                    </div>
                  </div>
                </div>
              </motion.div>
            </div>
          </motion.div>
        </div>
      </div>

      {/* Прокрутка вниз */}
      <motion.div
        animate={{ y: [0, 10, 0] }}
        transition={{ duration: 2, repeat: Infinity }}
        className="absolute bottom-8 left-1/2 transform -translate-x-1/2"
      >
        <div className="w-6 h-10 border-2 border-gray-400 dark:border-gray-600 rounded-full flex justify-center">
          <div className="w-1 h-3 bg-gray-400 dark:bg-gray-600 rounded-full mt-2 animate-pulse" />
        </div>
      </motion.div>
    </section>
  )
}
</file>

<file path="index.html">
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FarmSharing - Свежие продукты от фермы к столу</title>
    <link rel="stylesheet" href="style.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
</head>
<body>
    <!-- Header -->
    <header class="header">
        <div class="container">
            <div class="header__content">
                <!-- Logo -->
                <div class="header__logo">
                    <i class="fas fa-seedling"></i>
                    <span>FarmSharing</span>
                </div>

                <!-- Navigation -->
                <nav class="header__nav">
                    <a href="#home" class="nav-link active">Главная</a>
                    <a href="#products" class="nav-link">Продукты</a>
                    <a href="#farmers" class="nav-link">Фермеры</a>
                    <a href="#about" class="nav-link">О нас</a>
                </nav>

                <!-- Header Actions -->
                <div class="header__actions">
                    <!-- Search -->
                    <div class="search-container">
                        <button class="search-btn" id="searchBtn">
                            <i class="fas fa-search"></i>
                        </button>
                        <div class="search-input-container hidden" id="searchContainer">
                            <input type="text" placeholder="Поиск продуктов..." class="search-input" id="searchInput">
                            <button class="search-close" id="searchClose">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>

                    <!-- Language Selector -->
                    <div class="dropdown language-dropdown">
                        <button class="dropdown-btn" id="languageBtn">
                            <span class="flag">🇷🇺</span>
                            <span class="text">Русский</span>
                            <i class="fas fa-chevron-down"></i>
                        </button>
                        <div class="dropdown-menu hidden" id="languageMenu">
                            <button class="dropdown-item" data-lang="ru">
                                <span class="flag">🇷🇺</span>
                                <span>Русский</span>
                            </button>
                            <button class="dropdown-item" data-lang="en">
                                <span class="flag">🇺🇸</span>
                                <span>English</span>
                            </button>
                            <button class="dropdown-item" data-lang="he">
                                <span class="flag">🇮🇱</span>
                                <span>עברית</span>
                            </button>
                            <button class="dropdown-item" data-lang="ar">
                                <span class="flag">🇸🇦</span>
                                <span>العربية</span>
                            </button>
                        </div>
                    </div>

                    <!-- Currency Selector -->
                    <div class="dropdown currency-dropdown">
                        <button class="dropdown-btn" id="currencyBtn">
                            <span class="currency-symbol">₪</span>
                            <i class="fas fa-chevron-down"></i>
                        </button>
                        <div class="dropdown-menu hidden" id="currencyMenu">
                            <button class="dropdown-item" data-currency="ILS">
                                <span>₪ Шекель</span>
                            </button>
                            <button class="dropdown-item" data-currency="USD">
                                <span>$ Доллар</span>
                            </button>
                            <button class="dropdown-item" data-currency="EUR">
                                <span>€ Евро</span>
                            </button>
                        </div>
                    </div>

                    <!-- Theme Toggle -->
                    <button class="theme-toggle" id="themeToggle">
                        <i class="fas fa-sun"></i>
                    </button>

                    <!-- Profile -->
                    <button class="profile-btn">
                        <i class="fas fa-user"></i>
                    </button>

                    <!-- Cart -->
                    <button class="cart-btn" id="cartBtn">
                        <i class="fas fa-shopping-cart"></i>
                        <span class="cart-count" id="cartCount">0</span>
                    </button>

                    <!-- Sell Products Button -->
                    <button class="btn btn--primary sell-btn">
                        <i class="fas fa-plus"></i>
                        <span class="sell-text">Продать продукцию</span>
                    </button>
                </div>

                <!-- Mobile Menu Toggle -->
                <button class="mobile-menu-toggle" id="mobileMenuToggle">
                    <span></span>
                    <span></span>
                    <span></span>
                </button>
            </div>
        </div>
    </header>

    <!-- Hero Section -->
    <section class="hero" id="home">
        <div class="hero__background">
            <div class="hero__floating-elements">
                <div class="floating-element floating-element--1">🥕</div>
                <div class="floating-element floating-element--2">🍎</div>
                <div class="floating-element floating-element--3">🥬</div>
                <div class="floating-element floating-element--4">🍯</div>
                <div class="floating-element floating-element--5">🥒</div>
                <div class="floating-element floating-element--6">🍊</div>
                <div class="floating-element floating-element--7">🍅</div>
                <div class="floating-element floating-element--8">🧀</div>
            </div>
        </div>

        <div class="container">
            <div class="hero__content">
                <div class="hero__main">
                    <h1 class="hero__title">
                        <span class="title-main">Свежие продукты</span>
                        <span class="highlight">от фермы к столу</span>
                    </h1>
                    
                    <p class="hero__subtitle">
                        Прямая связь с местными фермерами Израиля. 
                        Свежие, органические продукты с доставкой прямо к вашему дому.
                    </p>

                    <div class="hero__stats">
                        <div class="stat">
                            <div class="stat__number">500+</div>
                            <div class="stat__label">Фермеров</div>
                        </div>
                        <div class="stat">
                            <div class="stat__number">10k+</div>
                            <div class="stat__label">Клиентов</div>
                        </div>
                        <div class="stat">
                            <div class="stat__number">24ч</div>
                            <div class="stat__label">Доставка</div>
                        </div>
                    </div>

                    <div class="hero__actions">
                        <button class="btn btn--primary btn--lg hero__btn" id="shopBtn">
                            <i class="fas fa-shopping-basket"></i>
                            <span>Купить свежие продукты</span>
                        </button>
                        <button class="btn btn--outline btn--lg hero__btn">
                            <i class="fas fa-store"></i>
                            <span>Стать продавцом</span>
                        </button>
                    </div>
                </div>

                <div class="hero__testimonials">
                    <div class="testimonial">
                        <div class="testimonial__rating">
                            <i class="fas fa-star"></i>
                            <i class="fas fa-star"></i>
                            <i class="fas fa-star"></i>
                            <i class="fas fa-star"></i>
                            <i class="fas fa-star"></i>
                        </div>
                        <p class="testimonial__text">"Лучшие овощи в Израиле!"</p>
                        <div class="testimonial__author">— Рахель, Тель-Авив</div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Products Section -->
    <section class="products" id="products">
        <div class="container">
            <div class="section-header">
                <h2 class="section-title">Свежие продукты</h2>
                <p class="section-subtitle">Выберите лучшие продукты от наших проверенных фермеров</p>
            </div>

            <!-- Category Filter -->
            <div class="category-filter">
                <button class="category-btn active" data-category="all">
                    <span>🛒 Все продукты</span>
                </button>
                <button class="category-btn" data-category="Fruits">
                    <span>🍎 Фрукты</span>
                </button>
                <button class="category-btn" data-category="Vegetables">
                    <span>🥕 Овощи</span>
                </button>
                <button class="category-btn" data-category="Dairy">
                    <span>🥛 Молочные</span>
                </button>
                <button class="category-btn" data-category="Herbs">
                    <span>🌿 Травы</span>
                </button>
                <button class="category-btn" data-category="Pantry">
                    <span>🍯 Кладовая</span>
                </button>
            </div>

            <!-- Products Grid -->
            <div class="products-grid" id="productsGrid">
                <!-- Products will be rendered here by JavaScript -->
            </div>
        </div>
    </section>

    <!-- Cart Drawer -->
    <div class="cart-drawer hidden" id="cartDrawer">
        <div class="cart-drawer__overlay" id="cartOverlay"></div>
        <div class="cart-drawer__content">
            <div class="cart-drawer__header">
                <h3>Корзина покупок</h3>
                <button class="cart-drawer__close" id="cartClose">
                    <i class="fas fa-times"></i>
                </button>
            </div>

            <div class="cart-drawer__body">
                <!-- Free Delivery Progress -->
                <div class="free-delivery-progress">
                    <div class="progress-info">
                        <span class="progress-text">До бесплатной доставки:</span>
                        <span class="progress-amount" id="progressAmount">₪100</span>
                    </div>
                    <div class="progress-bar">
                        <div class="progress-fill" id="progressFill"></div>
                    </div>
                </div>

                <!-- Cart Items -->
                <div class="cart-items" id="cartItems">
                    <div class="empty-cart">
                        <i class="fas fa-shopping-cart"></i>
                        <p>Корзина пуста</p>
                        <p class="empty-cart__subtitle">Добавьте продукты для покупки</p>
                    </div>
                </div>

                <!-- Promo Code -->
                <div class="promo-code">
                    <input type="text" placeholder="Введите промокод" class="form-control" id="promoInput">
                    <button class="btn btn--secondary" id="applyPromo">Применить</button>
                </div>
            </div>

            <div class="cart-drawer__footer">
                <!-- Order Summary -->
                <div class="order-summary">
                    <div class="summary-row">
                        <span>Товары:</span>
                        <span id="subtotal">₪0</span>
                    </div>
                    <div class="summary-row">
                        <span>Доставка:</span>
                        <span id="delivery">₪15</span>
                    </div>
                    <div class="summary-row total">
                        <span>Итого:</span>
                        <span id="total">₪0</span>
                    </div>
                </div>

                <button class="btn btn--primary btn--full-width checkout-btn" id="checkoutBtn">
                    <i class="fas fa-credit-card"></i>
                    <span>Оформить заказ</span>
                </button>
            </div>
        </div>
    </div>

    <!-- Loading Overlay -->
    <div class="loading-overlay hidden" id="loadingOverlay">
        <div class="loading-spinner">
            <i class="fas fa-spinner fa-spin"></i>
            <p>Добавляем в корзину...</p>
        </div>
    </div>

    <!-- Success Toast -->
    <div class="toast hidden" id="successToast">
        <i class="fas fa-check-circle"></i>
        <span>Товар добавлен в корзину!</span>
    </div>

    <script src="app.js"></script>
</body>
</html>
</file>

<file path="lib-utils.ts">
import { type ClassValue, clsx } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

// Форматирование цены
export function formatPrice(price: number, currency: 'ILS' | 'USD' | 'EUR' = 'ILS'): string {
  const symbols = {
    ILS: '₪',
    USD: '$',
    EUR: '€'
  };
  
  return `${symbols[currency]}${price.toFixed(2)}`;
}

// Генерация ID
export function generateId(): string {
  return Math.random().toString(36).substr(2, 9);
}
</file>

<file path="package-fixed.json">
{
  "name": "farm-sharing-israel",
  "private": true,
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@emotion/react": "^11.11.1",
    "@emotion/styled": "^11.11.0",
    "@fontsource/roboto": "^5.0.8",
    "@mui/icons-material": "^5.15.0",
    "@mui/material": "^5.15.0",
    "@reduxjs/toolkit": "^2.0.1",
    "axios": "^1.6.2",
    "framer-motion": "^10.16.16",
    "i18next": "^23.7.6",
    "lucide-react": "^0.294.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-i18next": "^13.5.0",
    "react-redux": "^9.0.4",
    "react-router-dom": "^6.20.1",
    "clsx": "^2.0.0",
    "tailwind-merge": "^2.2.0"
  },
  "devDependencies": {
    "@types/react": "^18.2.43",
    "@types/react-dom": "^18.2.17",
    "@typescript-eslint/eslint-plugin": "^6.14.0",
    "@typescript-eslint/parser": "^6.14.0",
    "@vitejs/plugin-react": "^4.2.1",
    "autoprefixer": "^10.4.16",
    "eslint": "^8.55.0",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.5",
    "postcss": "^8.4.32",
    "tailwindcss": "^3.3.6",
    "typescript": "^5.2.2",
    "vite": "^5.0.8"
  }
}
</file>

<file path="ProductCard-improved.tsx">
'use client'

import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { 
  Card, 
  CardMedia, 
  CardContent, 
  Typography, 
  Button, 
  Box, 
  IconButton,
  Chip
} from '@mui/material';
import { 
  ShoppingCartOutlined as ShoppingCartIcon,
  FavoriteBorder as FavoriteBorderIcon,
  Favorite as FavoriteIcon,
  Grade as StarIcon,
  Eco as EcoIcon
} from '@mui/icons-material';
import { useTranslation } from 'react-i18next';
import { useDispatch } from 'react-redux';
import { addToCart } from '../../../features/cart/model/cartSlice';
import { formatPrice } from '../../../lib/utils';
import type { Product } from '../../../types';

interface ProductCardProps {
  product: Product;
  onOpenDetails?: (product: Product) => void;
}

export const ProductCard = ({ product, onOpenDetails }: ProductCardProps) => {
  const { t } = useTranslation();
  const dispatch = useDispatch();
  const [isFavorite, setIsFavorite] = useState(false);
  const [isAddingToCart, setIsAddingToCart] = useState(false);

  // Обработчик добавления в избранное
  const toggleFavorite = (e: React.MouseEvent) => {
    e.stopPropagation();
    setIsFavorite(!isFavorite);
  };

  // Обработчик добавления в корзину
  const handleAddToCart = async (e: React.MouseEvent) => {
    e.stopPropagation();
    setIsAddingToCart(true);
    
    dispatch(addToCart({ 
      product, 
      quantity: 1 
    }));
    
    // Имитация загрузки
    setTimeout(() => {
      setIsAddingToCart(false);
    }, 500);
  };

  // Обработчик клика по карточке
  const handleCardClick = () => {
    onOpenDetails?.(product);
  };

  // Путь к изображению (исправляем для assets)
  const getImagePath = (imageUrl: string | undefined) => {
    if (!imageUrl) return '/placeholder-product.jpg';
    
    // Если это путь к assets, исправляем его
    if (imageUrl.startsWith('/src/assets/')) {
      return imageUrl.replace('/src/assets/', '/assets/');
    }
    
    return imageUrl;
  };

  return (
    <motion.div
      whileHover={{ y: -8 }}
      whileTap={{ scale: 0.98 }}
      transition={{ duration: 0.2 }}
    >
      <Card
        onClick={handleCardClick}
        sx={{
          height: '100%',
          display: 'flex',
          flexDirection: 'column',
          borderRadius: 3,
          overflow: 'hidden',
          position: 'relative',
          cursor: 'pointer',
          boxShadow: '0 2px 12px rgba(0,0,0,0.08)',
          transition: 'box-shadow 0.3s ease',
          '&:hover': {
            boxShadow: '0 8px 32px rgba(0,0,0,0.16)',
          }
        }}
      >
        {/* Органический значок */}
        {product.isOrganic && (
          <motion.div
            initial={{ scale: 0 }}
            animate={{ scale: 1 }}
            transition={{ delay: 0.2 }}
          >
            <Chip
              icon={<EcoIcon />}
              label="Organic"
              size="small"
              sx={{
                position: 'absolute',
                top: 12,
                left: 12,
                zIndex: 2,
                backgroundColor: '#4ade80',
                color: 'white',
                fontWeight: 'bold',
                '& .MuiChip-icon': {
                  color: 'white'
                }
              }}
            />
          </motion.div>
        )}

        {/* Кнопка избранного */}
        <IconButton
          onClick={toggleFavorite}
          sx={{
            position: 'absolute',
            top: 8,
            right: 8,
            zIndex: 2,
            backgroundColor: 'rgba(255,255,255,0.9)',
            '&:hover': {
              backgroundColor: 'rgba(255,255,255,1)',
              transform: 'scale(1.1)',
            },
            transition: 'all 0.2s ease'
          }}
        >
          <motion.div
            animate={{ scale: isFavorite ? 1.2 : 1 }}
            transition={{ duration: 0.2 }}
          >
            {isFavorite ? (
              <FavoriteIcon sx={{ color: '#ef4444' }} />
            ) : (
              <FavoriteBorderIcon sx={{ color: '#6b7280' }} />
            )}
          </motion.div>
        </IconButton>

        {/* Изображение продукта */}
        <CardMedia
          component="img"
          height={200}
          image={getImagePath(product.imageUrl)}
          alt={product.title}
          sx={{ 
            objectFit: 'cover',
            transition: 'transform 0.3s ease',
            '&:hover': {
              transform: 'scale(1.05)'
            }
          }}
          onError={(e) => {
            // Fallback для изображений
            (e.target as HTMLImageElement).src = 'https://via.placeholder.com/300x200/4ade80/ffffff?text=Fresh+Product';
          }}
        />

        {/* Контент карточки */}
        <CardContent sx={{ flexGrow: 1, display: 'flex', flexDirection: 'column', p: 3 }}>
          {/* Название товара */}
          <Typography 
            variant="h6" 
            component="h3" 
            fontWeight="bold" 
            gutterBottom
            sx={{
              fontSize: '1.1rem',
              lineHeight: 1.3,
              minHeight: '2.6rem',
              display: '-webkit-box',
              WebkitLineClamp: 2,
              WebkitBoxOrient: 'vertical',
              overflow: 'hidden'
            }}
          >
            {product.title}
          </Typography>

          {/* Информация о ферме */}
          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2, gap: 1 }}>
            <Typography variant="body2" color="text.secondary">
              by {product.farm.name} • {product.farm.city}
            </Typography>
            
            <Box sx={{ display: 'flex', alignItems: 'center', ml: 'auto' }}>
              <StarIcon sx={{ color: '#fbbf24', fontSize: 16, mr: 0.5 }} />
              <Typography variant="body2" color="text.secondary" fontWeight="medium">
                {product.farm.rating}
              </Typography>
            </Box>
          </Box>

          {/* Наличие */}
          <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
            {product.amount} {product.units} available
          </Typography>

          {/* Распорка */}
          <Box sx={{ flexGrow: 1 }} />

          {/* Цена и кнопка */}
          <Box sx={{ 
            display: 'flex', 
            alignItems: 'center', 
            justifyContent: 'space-between',
            mt: 'auto'
          }}>
            <Box>
              <Typography variant="h5" component="div" fontWeight="bold" color="primary.main">
                {formatPrice(product.price)}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                per {product.units}
              </Typography>
            </Box>

            <motion.div
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              <Button
                variant="contained"
                onClick={handleAddToCart}
                disabled={isAddingToCart}
                startIcon={
                  <motion.div
                    animate={{ rotate: isAddingToCart ? 360 : 0 }}
                    transition={{ duration: 0.5, repeat: isAddingToCart ? Infinity : 0 }}
                  >
                    <ShoppingCartIcon />
                  </motion.div>
                }
                sx={{
                  backgroundColor: '#4ade80',
                  borderRadius: 2,
                  fontWeight: 'bold',
                  px: 3,
                  py: 1,
                  '&:hover': {
                    backgroundColor: '#22c55e',
                  },
                  '&:disabled': {
                    backgroundColor: '#94a3b8',
                  }
                }}
              >
                {isAddingToCart ? 'Adding...' : 'Add to Cart'}
              </Button>
            </motion.div>
          </Box>
        </CardContent>
      </Card>
    </motion.div>
  );
};

export default ProductCard;
</file>

<file path="ProductCard.tsx">
'use client'

import { useState } from 'react'
import { motion } from 'framer-motion'
import { Heart, ShoppingCart, Star, MapPin, Leaf } from 'lucide-react'
import { Product } from '@/types/product'
import { useAppDispatch } from '@/lib/redux/hooks'
import { addToCart } from '@/lib/redux/cartSlice'
import { cn } from '@/lib/utils'

interface ProductCardProps {
  product: Product
  className?: string
}

export function ProductCard({ product, className }: ProductCardProps) {
  const [isLiked, setIsLiked] = useState(false)
  const [isLoading, setIsLoading] = useState(false)
  const dispatch = useAppDispatch()

  const handleAddToCart = async () => {
    setIsLoading(true)
    try {
      dispatch(addToCart({
        id: product.id,
        name: product.title,
        price: product.price,
        image: product.image,
        farmer: product.farm.name,
        quantity: 1
      }))
      // Добавляем небольшую задержку для лучшего UX
      await new Promise(resolve => setTimeout(resolve, 300))
    } finally {
      setIsLoading(false)
    }
  }

  const handleToggleLike = () => {
    setIsLiked(!isLiked)
    // Здесь можно добавить логику сохранения в избранное
  }

  const discountPercentage = product.originalPrice 
    ? Math.round((1 - product.price / product.originalPrice) * 100)
    : 0

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      whileHover={{ y: -8, scale: 1.02 }}
      transition={{ 
        duration: 0.3,
        ease: "easeOut"
      }}
      className={cn(
        "group relative bg-white dark:bg-gray-800 rounded-2xl overflow-hidden shadow-lg hover:shadow-2xl",
        "transition-all duration-300 border border-gray-100 dark:border-gray-700",
        "hover:border-green-200 dark:hover:border-green-600",
        className
      )}
    >
      {/* Изображение товара с градиентом */}
      <div className="relative aspect-[4/3] overflow-hidden">
        <motion.img
          src={product.image}
          alt={product.title}
          className="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110"
          whileHover={{ scale: 1.1 }}
        />
        
        {/* Градиентный оверлей */}
        <div className="absolute inset-0 bg-gradient-to-t from-black/20 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
        
        {/* Органический значок */}
        {product.isOrganic && (
          <motion.div
            initial={{ scale: 0 }}
            animate={{ scale: 1 }}
            className="absolute top-3 left-3 bg-green-500 text-white px-2 py-1 rounded-full text-xs font-semibold flex items-center gap-1 shadow-lg"
          >
            <Leaf className="w-3 h-3" />
            Organic
          </motion.div>
        )}

        {/* Скидка */}
        {discountPercentage > 0 && (
          <div className="absolute top-3 right-3 bg-red-500 text-white px-2 py-1 rounded-full text-xs font-bold">
            -{discountPercentage}%
          </div>
        )}

        {/* Кнопка "В избранное" */}
        <motion.button
          whileHover={{ scale: 1.1 }}
          whileTap={{ scale: 0.9 }}
          onClick={handleToggleLike}
          className={cn(
            "absolute top-3 right-3 p-2 rounded-full backdrop-blur-sm transition-all duration-200",
            isLiked 
              ? "bg-red-500 text-white shadow-lg" 
              : "bg-white/80 text-gray-600 hover:bg-white hover:text-red-500"
          )}
        >
          <Heart 
            className={cn("w-4 h-4", isLiked && "fill-current")} 
          />
        </motion.button>
      </div>

      {/* Контент карточки */}
      <div className="p-4 space-y-3">
        {/* Название и фермер */}
        <div>
          <h3 className="font-bold text-lg text-gray-900 dark:text-white group-hover:text-green-600 transition-colors duration-200">
            {product.title}
          </h3>
          <p className="text-sm text-gray-600 dark:text-gray-400 flex items-center gap-1">
            <span>by</span>
            <span className="font-medium text-green-600 dark:text-green-400">
              {product.farm.name}
            </span>
          </p>
        </div>

        {/* Локация и рейтинг */}
        <div className="flex items-center justify-between text-sm">
          <div className="flex items-center gap-1 text-gray-500 dark:text-gray-400">
            <MapPin className="w-3 h-3" />
            <span>{product.farm.city}</span>
          </div>
          <div className="flex items-center gap-1">
            <Star className="w-4 h-4 fill-yellow-400 text-yellow-400" />
            <span className="font-medium text-gray-700 dark:text-gray-300">
              {product.farm.rating}
            </span>
            <span className="text-gray-500 dark:text-gray-400 text-xs">
              ({product.farm.reviewsCount || 0})
            </span>
          </div>
        </div>

        {/* Цена и кнопка */}
        <div className="flex items-center justify-between pt-2">
          <div className="space-y-1">
            <div className="flex items-baseline gap-2">
              <span className="text-2xl font-bold text-gray-900 dark:text-white">
                ₪{product.price}
              </span>
              {product.originalPrice && (
                <span className="text-sm line-through text-gray-500 dark:text-gray-400">
                  ₪{product.originalPrice}
                </span>
              )}
            </div>
            <span className="text-sm text-gray-600 dark:text-gray-400">
              per {product.units}
            </span>
          </div>

          {/* Кнопка "В корзину" */}
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={handleAddToCart}
            disabled={isLoading}
            className={cn(
              "px-4 py-2 bg-gradient-to-r from-green-500 to-green-600 text-white rounded-xl",
              "font-semibold text-sm flex items-center gap-2 shadow-lg",
              "hover:from-green-600 hover:to-green-700 transition-all duration-200",
              "disabled:opacity-50 disabled:cursor-not-allowed",
              "hover:shadow-green-200 dark:hover:shadow-green-800"
            )}
          >
            {isLoading ? (
              <motion.div
                animate={{ rotate: 360 }}
                transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                className="w-4 h-4 border-2 border-white border-t-transparent rounded-full"
              />
            ) : (
              <ShoppingCart className="w-4 h-4" />
            )}
            Add to Cart
          </motion.button>
        </div>

        {/* Количество в наличии */}
        {product.amount && (
          <div className="pt-2 border-t border-gray-100 dark:border-gray-700">
            <div className="flex items-center justify-between text-xs">
              <span className="text-gray-500 dark:text-gray-400">
                In stock: {product.amount} {product.units}
              </span>
              {product.amount < 10 && (
                <span className="text-red-500 font-medium">
                  Only {product.amount} left!
                </span>
              )}
            </div>
          </div>
        )}
      </div>

      {/* Эффект при наведении */}
      <div className="absolute inset-0 rounded-2xl ring-0 ring-green-500/20 group-hover:ring-2 transition-all duration-300" />
    </motion.div>
  )
}
</file>

<file path="redux-store.ts">
import { configureStore } from '@reduxjs/toolkit'
import cartReducer from './cartSlice'
import productsReducer from './productsSlice'
import themeReducer from './themeSlice'
import userReducer from './userSlice'
import filtersReducer from './filtersSlice'

export const store = configureStore({
  reducer: {
    cart: cartReducer,
    products: productsReducer,
    theme: themeReducer,
    user: userReducer,
    filters: filtersReducer,
  },
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware({
      serializableCheck: {
        // Игнорируем Date объекты в некоторых action types
        ignoredActions: ['products/setProducts', 'user/setUser'],
        ignoredPaths: ['products.items.createdAt', 'products.items.updatedAt', 'user.createdAt'],
      },
    }),
})

export type RootState = ReturnType<typeof store.getState>
export type AppDispatch = typeof store.dispatch

// Типизированные хуки для использования в компонентах
import { useDispatch, useSelector, TypedUseSelectorHook } from 'react-redux'

export const useAppDispatch = () => useDispatch<AppDispatch>()
export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector
</file>

<file path="store-fixed.ts">
import { configureStore } from '@reduxjs/toolkit';
import cartReducer from '../features/cart/model/cartSlice';

export const store = configureStore({
  reducer: {
    cart: cartReducer,
  },
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware({
      serializableCheck: {
        ignoredActions: ['persist/PERSIST', 'persist/REHYDRATE'],
      },
    }),
});

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;

export default store;
</file>

<file path="style.css">
:root {
  /* Primitive Color Tokens */
  --color-white: rgba(255, 255, 255, 1);
  --color-black: rgba(0, 0, 0, 1);
  --color-cream-50: rgba(252, 252, 249, 1);
  --color-cream-100: rgba(255, 255, 253, 1);
  --color-gray-200: rgba(245, 245, 245, 1);
  --color-gray-300: rgba(167, 169, 169, 1);
  --color-gray-400: rgba(119, 124, 124, 1);
  --color-slate-500: rgba(98, 108, 113, 1);
  --color-brown-600: rgba(94, 82, 64, 1);
  --color-charcoal-700: rgba(31, 33, 33, 1);
  --color-charcoal-800: rgba(38, 40, 40, 1);
  --color-slate-900: rgba(19, 52, 59, 1);
  --color-teal-300: rgba(50, 184, 198, 1);
  --color-teal-400: rgba(45, 166, 178, 1);
  --color-teal-500: rgba(33, 128, 141, 1);
  --color-teal-600: rgba(29, 116, 128, 1);
  --color-teal-700: rgba(26, 104, 115, 1);
  --color-teal-800: rgba(41, 150, 161, 1);
  --color-red-400: rgba(255, 84, 89, 1);
  --color-red-500: rgba(192, 21, 47, 1);
  --color-orange-400: rgba(230, 129, 97, 1);
  --color-orange-500: rgba(168, 75, 47, 1);

  /* RGB versions for opacity control */
  --color-brown-600-rgb: 94, 82, 64;
  --color-teal-500-rgb: 33, 128, 141;
  --color-slate-900-rgb: 19, 52, 59;
  --color-slate-500-rgb: 98, 108, 113;
  --color-red-500-rgb: 192, 21, 47;
  --color-red-400-rgb: 255, 84, 89;
  --color-orange-500-rgb: 168, 75, 47;
  --color-orange-400-rgb: 230, 129, 97;

  /* Background color tokens (Light Mode) */
  --color-bg-1: rgba(59, 130, 246, 0.08); /* Light blue */
  --color-bg-2: rgba(245, 158, 11, 0.08); /* Light yellow */
  --color-bg-3: rgba(34, 197, 94, 0.08); /* Light green */
  --color-bg-4: rgba(239, 68, 68, 0.08); /* Light red */
  --color-bg-5: rgba(147, 51, 234, 0.08); /* Light purple */
  --color-bg-6: rgba(249, 115, 22, 0.08); /* Light orange */
  --color-bg-7: rgba(236, 72, 153, 0.08); /* Light pink */
  --color-bg-8: rgba(6, 182, 212, 0.08); /* Light cyan */

  /* Semantic Color Tokens (Light Mode) */
  --color-background: var(--color-cream-50);
  --color-surface: var(--color-cream-100);
  --color-text: var(--color-slate-900);
  --color-text-secondary: var(--color-slate-500);
  --color-primary: var(--color-teal-500);
  --color-primary-hover: var(--color-teal-600);
  --color-primary-active: var(--color-teal-700);
  --color-secondary: rgba(var(--color-brown-600-rgb), 0.12);
  --color-secondary-hover: rgba(var(--color-brown-600-rgb), 0.2);
  --color-secondary-active: rgba(var(--color-brown-600-rgb), 0.25);
  --color-border: rgba(var(--color-brown-600-rgb), 0.2);
  --color-btn-primary-text: var(--color-cream-50);
  --color-card-border: rgba(var(--color-brown-600-rgb), 0.12);
  --color-card-border-inner: rgba(var(--color-brown-600-rgb), 0.12);
  --color-error: var(--color-red-500);
  --color-success: var(--color-teal-500);
  --color-warning: var(--color-orange-500);
  --color-info: var(--color-slate-500);
  --color-focus-ring: rgba(var(--color-teal-500-rgb), 0.4);
  --color-select-caret: rgba(var(--color-slate-900-rgb), 0.8);

  /* Common style patterns */
  --focus-ring: 0 0 0 3px var(--color-focus-ring);
  --focus-outline: 2px solid var(--color-primary);
  --status-bg-opacity: 0.15;
  --status-border-opacity: 0.25;
  --select-caret-light: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23134252' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
  --select-caret-dark: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23f5f5f5' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");

  /* RGB versions for opacity control */
  --color-success-rgb: 33, 128, 141;
  --color-error-rgb: 192, 21, 47;
  --color-warning-rgb: 168, 75, 47;
  --color-info-rgb: 98, 108, 113;

  /* Typography */
  --font-family-base: "FKGroteskNeue", "Geist", "Inter", -apple-system,
    BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
  --font-family-mono: "Berkeley Mono", ui-monospace, SFMono-Regular, Menlo,
    Monaco, Consolas, monospace;
  --font-size-xs: 11px;
  --font-size-sm: 12px;
  --font-size-base: 14px;
  --font-size-md: 14px;
  --font-size-lg: 16px;
  --font-size-xl: 18px;
  --font-size-2xl: 20px;
  --font-size-3xl: 24px;
  --font-size-4xl: 30px;
  --font-weight-normal: 400;
  --font-weight-medium: 500;
  --font-weight-semibold: 550;
  --font-weight-bold: 600;
  --line-height-tight: 1.2;
  --line-height-normal: 1.5;
  --letter-spacing-tight: -0.01em;

  /* Spacing */
  --space-0: 0;
  --space-1: 1px;
  --space-2: 2px;
  --space-4: 4px;
  --space-6: 6px;
  --space-8: 8px;
  --space-10: 10px;
  --space-12: 12px;
  --space-16: 16px;
  --space-20: 20px;
  --space-24: 24px;
  --space-32: 32px;

  /* Border Radius */
  --radius-sm: 6px;
  --radius-base: 8px;
  --radius-md: 10px;
  --radius-lg: 12px;
  --radius-full: 9999px;

  /* Shadows */
  --shadow-xs: 0 1px 2px rgba(0, 0, 0, 0.02);
  --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.04), 0 1px 2px rgba(0, 0, 0, 0.02);
  --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.04),
    0 2px 4px -1px rgba(0, 0, 0, 0.02);
  --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.04),
    0 4px 6px -2px rgba(0, 0, 0, 0.02);
  --shadow-inset-sm: inset 0 1px 0 rgba(255, 255, 255, 0.15),
    inset 0 -1px 0 rgba(0, 0, 0, 0.03);

  /* Animation */
  --duration-fast: 150ms;
  --duration-normal: 250ms;
  --ease-standard: cubic-bezier(0.16, 1, 0.3, 1);

  /* Layout */
  --container-sm: 640px;
  --container-md: 768px;
  --container-lg: 1024px;
  --container-xl: 1280px;
}

/* Dark mode colors */
@media (prefers-color-scheme: dark) {
  :root {
    /* RGB versions for opacity control (Dark Mode) */
    --color-gray-400-rgb: 119, 124, 124;
    --color-teal-300-rgb: 50, 184, 198;
    --color-gray-300-rgb: 167, 169, 169;
    --color-gray-200-rgb: 245, 245, 245;

    /* Background color tokens (Dark Mode) */
    --color-bg-1: rgba(29, 78, 216, 0.15); /* Dark blue */
    --color-bg-2: rgba(180, 83, 9, 0.15); /* Dark yellow */
    --color-bg-3: rgba(21, 128, 61, 0.15); /* Dark green */
    --color-bg-4: rgba(185, 28, 28, 0.15); /* Dark red */
    --color-bg-5: rgba(107, 33, 168, 0.15); /* Dark purple */
    --color-bg-6: rgba(194, 65, 12, 0.15); /* Dark orange */
    --color-bg-7: rgba(190, 24, 93, 0.15); /* Dark pink */
    --color-bg-8: rgba(8, 145, 178, 0.15); /* Dark cyan */
    
    /* Semantic Color Tokens (Dark Mode) */
    --color-background: var(--color-charcoal-700);
    --color-surface: var(--color-charcoal-800);
    --color-text: var(--color-gray-200);
    --color-text-secondary: rgba(var(--color-gray-300-rgb), 0.7);
    --color-primary: var(--color-teal-300);
    --color-primary-hover: var(--color-teal-400);
    --color-primary-active: var(--color-teal-800);
    --color-secondary: rgba(var(--color-gray-400-rgb), 0.15);
    --color-secondary-hover: rgba(var(--color-gray-400-rgb), 0.25);
    --color-secondary-active: rgba(var(--color-gray-400-rgb), 0.3);
    --color-border: rgba(var(--color-gray-400-rgb), 0.3);
    --color-error: var(--color-red-400);
    --color-success: var(--color-teal-300);
    --color-warning: var(--color-orange-400);
    --color-info: var(--color-gray-300);
    --color-focus-ring: rgba(var(--color-teal-300-rgb), 0.4);
    --color-btn-primary-text: var(--color-slate-900);
    --color-card-border: rgba(var(--color-gray-400-rgb), 0.2);
    --color-card-border-inner: rgba(var(--color-gray-400-rgb), 0.15);
    --shadow-inset-sm: inset 0 1px 0 rgba(255, 255, 255, 0.1),
      inset 0 -1px 0 rgba(0, 0, 0, 0.15);
    --button-border-secondary: rgba(var(--color-gray-400-rgb), 0.2);
    --color-border-secondary: rgba(var(--color-gray-400-rgb), 0.2);
    --color-select-caret: rgba(var(--color-gray-200-rgb), 0.8);

    /* Common style patterns - updated for dark mode */
    --focus-ring: 0 0 0 3px var(--color-focus-ring);
    --focus-outline: 2px solid var(--color-primary);
    --status-bg-opacity: 0.15;
    --status-border-opacity: 0.25;
    --select-caret-light: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23134252' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
    --select-caret-dark: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23f5f5f5' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");

    /* RGB versions for dark mode */
    --color-success-rgb: var(--color-teal-300-rgb);
    --color-error-rgb: var(--color-red-400-rgb);
    --color-warning-rgb: var(--color-orange-400-rgb);
    --color-info-rgb: var(--color-gray-300-rgb);
  }
}

/* Data attribute for manual theme switching */
[data-color-scheme="dark"] {
  /* RGB versions for opacity control (dark mode) */
  --color-gray-400-rgb: 119, 124, 124;
  --color-teal-300-rgb: 50, 184, 198;
  --color-gray-300-rgb: 167, 169, 169;
  --color-gray-200-rgb: 245, 245, 245;

  /* Colorful background palette - Dark Mode */
  --color-bg-1: rgba(29, 78, 216, 0.15); /* Dark blue */
  --color-bg-2: rgba(180, 83, 9, 0.15); /* Dark yellow */
  --color-bg-3: rgba(21, 128, 61, 0.15); /* Dark green */
  --color-bg-4: rgba(185, 28, 28, 0.15); /* Dark red */
  --color-bg-5: rgba(107, 33, 168, 0.15); /* Dark purple */
  --color-bg-6: rgba(194, 65, 12, 0.15); /* Dark orange */
  --color-bg-7: rgba(190, 24, 93, 0.15); /* Dark pink */
  --color-bg-8: rgba(8, 145, 178, 0.15); /* Dark cyan */
  
  /* Semantic Color Tokens (Dark Mode) */
  --color-background: var(--color-charcoal-700);
  --color-surface: var(--color-charcoal-800);
  --color-text: var(--color-gray-200);
  --color-text-secondary: rgba(var(--color-gray-300-rgb), 0.7);
  --color-primary: var(--color-teal-300);
  --color-primary-hover: var(--color-teal-400);
  --color-primary-active: var(--color-teal-800);
  --color-secondary: rgba(var(--color-gray-400-rgb), 0.15);
  --color-secondary-hover: rgba(var(--color-gray-400-rgb), 0.25);
  --color-secondary-active: rgba(var(--color-gray-400-rgb), 0.3);
  --color-border: rgba(var(--color-gray-400-rgb), 0.3);
  --color-error: var(--color-red-400);
  --color-success: var(--color-teal-300);
  --color-warning: var(--color-orange-400);
  --color-info: var(--color-gray-300);
  --color-focus-ring: rgba(var(--color-teal-300-rgb), 0.4);
  --color-btn-primary-text: var(--color-slate-900);
  --color-card-border: rgba(var(--color-gray-400-rgb), 0.15);
  --color-card-border-inner: rgba(var(--color-gray-400-rgb), 0.15);
  --shadow-inset-sm: inset 0 1px 0 rgba(255, 255, 255, 0.1),
    inset 0 -1px 0 rgba(0, 0, 0, 0.15);
  --color-border-secondary: rgba(var(--color-gray-400-rgb), 0.2);
  --color-select-caret: rgba(var(--color-gray-200-rgb), 0.8);

  /* Common style patterns - updated for dark mode */
  --focus-ring: 0 0 0 3px var(--color-focus-ring);
  --focus-outline: 2px solid var(--color-primary);
  --status-bg-opacity: 0.15;
  --status-border-opacity: 0.25;
  --select-caret-light: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23134252' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
  --select-caret-dark: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23f5f5f5' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");

  /* RGB versions for dark mode */
  --color-success-rgb: var(--color-teal-300-rgb);
  --color-error-rgb: var(--color-red-400-rgb);
  --color-warning-rgb: var(--color-orange-400-rgb);
  --color-info-rgb: var(--color-gray-300-rgb);
}

[data-color-scheme="light"] {
  /* RGB versions for opacity control (light mode) */
  --color-brown-600-rgb: 94, 82, 64;
  --color-teal-500-rgb: 33, 128, 141;
  --color-slate-900-rgb: 19, 52, 59;
  
  /* Semantic Color Tokens (Light Mode) */
  --color-background: var(--color-cream-50);
  --color-surface: var(--color-cream-100);
  --color-text: var(--color-slate-900);
  --color-text-secondary: var(--color-slate-500);
  --color-primary: var(--color-teal-500);
  --color-primary-hover: var(--color-teal-600);
  --color-primary-active: var(--color-teal-700);
  --color-secondary: rgba(var(--color-brown-600-rgb), 0.12);
  --color-secondary-hover: rgba(var(--color-brown-600-rgb), 0.2);
  --color-secondary-active: rgba(var(--color-brown-600-rgb), 0.25);
  --color-border: rgba(var(--color-brown-600-rgb), 0.2);
  --color-btn-primary-text: var(--color-cream-50);
  --color-card-border: rgba(var(--color-brown-600-rgb), 0.12);
  --color-card-border-inner: rgba(var(--color-brown-600-rgb), 0.12);
  --color-error: var(--color-red-500);
  --color-success: var(--color-teal-500);
  --color-warning: var(--color-orange-500);
  --color-info: var(--color-slate-500);
  --color-focus-ring: rgba(var(--color-teal-500-rgb), 0.4);

  /* RGB versions for light mode */
  --color-success-rgb: var(--color-teal-500-rgb);
  --color-error-rgb: var(--color-red-500-rgb);
  --color-warning-rgb: var(--color-orange-500-rgb);
  --color-info-rgb: var(--color-slate-500-rgb);
}

/* Base styles */
html {
  font-size: var(--font-size-base);
  font-family: var(--font-family-base);
  line-height: var(--line-height-normal);
  color: var(--color-text);
  background-color: var(--color-background);
  -webkit-font-smoothing: antialiased;
  box-sizing: border-box;
}

body {
  margin: 0;
  padding: 0;
}

*,
*::before,
*::after {
  box-sizing: inherit;
}

/* Typography */
h1,
h2,
h3,
h4,
h5,
h6 {
  margin: 0;
  font-weight: var(--font-weight-semibold);
  line-height: var(--line-height-tight);
  color: var(--color-text);
  letter-spacing: var(--letter-spacing-tight);
}

h1 {
  font-size: var(--font-size-4xl);
}
h2 {
  font-size: var(--font-size-3xl);
}
h3 {
  font-size: var(--font-size-2xl);
}
h4 {
  font-size: var(--font-size-xl);
}
h5 {
  font-size: var(--font-size-lg);
}
h6 {
  font-size: var(--font-size-md);
}

p {
  margin: 0 0 var(--space-16) 0;
}

a {
  color: var(--color-primary);
  text-decoration: none;
  transition: color var(--duration-fast) var(--ease-standard);
}

a:hover {
  color: var(--color-primary-hover);
}

code,
pre {
  font-family: var(--font-family-mono);
  font-size: calc(var(--font-size-base) * 0.95);
  background-color: var(--color-secondary);
  border-radius: var(--radius-sm);
}

code {
  padding: var(--space-1) var(--space-4);
}

pre {
  padding: var(--space-16);
  margin: var(--space-16) 0;
  overflow: auto;
  border: 1px solid var(--color-border);
}

pre code {
  background: none;
  padding: 0;
}

/* Buttons */
.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: var(--space-8) var(--space-16);
  border-radius: var(--radius-base);
  font-size: var(--font-size-base);
  font-weight: 500;
  line-height: 1.5;
  cursor: pointer;
  transition: all var(--duration-normal) var(--ease-standard);
  border: none;
  text-decoration: none;
  position: relative;
}

.btn:focus-visible {
  outline: none;
  box-shadow: var(--focus-ring);
}

.btn--primary {
  background: var(--color-primary);
  color: var(--color-btn-primary-text);
}

.btn--primary:hover {
  background: var(--color-primary-hover);
}

.btn--primary:active {
  background: var(--color-primary-active);
}

.btn--secondary {
  background: var(--color-secondary);
  color: var(--color-text);
}

.btn--secondary:hover {
  background: var(--color-secondary-hover);
}

.btn--secondary:active {
  background: var(--color-secondary-active);
}

.btn--outline {
  background: transparent;
  border: 1px solid var(--color-border);
  color: var(--color-text);
}

.btn--outline:hover {
  background: var(--color-secondary);
}

.btn--sm {
  padding: var(--space-4) var(--space-12);
  font-size: var(--font-size-sm);
  border-radius: var(--radius-sm);
}

.btn--lg {
  padding: var(--space-10) var(--space-20);
  font-size: var(--font-size-lg);
  border-radius: var(--radius-md);
}

.btn--full-width {
  width: 100%;
}

.btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

/* Form elements */
.form-control {
  display: block;
  width: 100%;
  padding: var(--space-8) var(--space-12);
  font-size: var(--font-size-md);
  line-height: 1.5;
  color: var(--color-text);
  background-color: var(--color-surface);
  border: 1px solid var(--color-border);
  border-radius: var(--radius-base);
  transition: border-color var(--duration-fast) var(--ease-standard),
    box-shadow var(--duration-fast) var(--ease-standard);
}

textarea.form-control {
  font-family: var(--font-family-base);
  font-size: var(--font-size-base);
}

select.form-control {
  padding: var(--space-8) var(--space-12);
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-image: var(--select-caret-light);
  background-repeat: no-repeat;
  background-position: right var(--space-12) center;
  background-size: 16px;
  padding-right: var(--space-32);
}

/* Add a dark mode specific caret */
@media (prefers-color-scheme: dark) {
  select.form-control {
    background-image: var(--select-caret-dark);
  }
}

/* Also handle data-color-scheme */
[data-color-scheme="dark"] select.form-control {
  background-image: var(--select-caret-dark);
}

[data-color-scheme="light"] select.form-control {
  background-image: var(--select-caret-light);
}

.form-control:focus {
  border-color: var(--color-primary);
  outline: var(--focus-outline);
}

.form-label {
  display: block;
  margin-bottom: var(--space-8);
  font-weight: var(--font-weight-medium);
  font-size: var(--font-size-sm);
}

.form-group {
  margin-bottom: var(--space-16);
}

/* Card component */
.card {
  background-color: var(--color-surface);
  border-radius: var(--radius-lg);
  border: 1px solid var(--color-card-border);
  box-shadow: var(--shadow-sm);
  overflow: hidden;
  transition: box-shadow var(--duration-normal) var(--ease-standard);
}

.card:hover {
  box-shadow: var(--shadow-md);
}

.card__body {
  padding: var(--space-16);
}

.card__header,
.card__footer {
  padding: var(--space-16);
  border-bottom: 1px solid var(--color-card-border-inner);
}

/* Status indicators - simplified with CSS variables */
.status {
  display: inline-flex;
  align-items: center;
  padding: var(--space-6) var(--space-12);
  border-radius: var(--radius-full);
  font-weight: var(--font-weight-medium);
  font-size: var(--font-size-sm);
}

.status--success {
  background-color: rgba(
    var(--color-success-rgb, 33, 128, 141),
    var(--status-bg-opacity)
  );
  color: var(--color-success);
  border: 1px solid
    rgba(var(--color-success-rgb, 33, 128, 141), var(--status-border-opacity));
}

.status--error {
  background-color: rgba(
    var(--color-error-rgb, 192, 21, 47),
    var(--status-bg-opacity)
  );
  color: var(--color-error);
  border: 1px solid
    rgba(var(--color-error-rgb, 192, 21, 47), var(--status-border-opacity));
}

.status--warning {
  background-color: rgba(
    var(--color-warning-rgb, 168, 75, 47),
    var(--status-bg-opacity)
  );
  color: var(--color-warning);
  border: 1px solid
    rgba(var(--color-warning-rgb, 168, 75, 47), var(--status-border-opacity));
}

.status--info {
  background-color: rgba(
    var(--color-info-rgb, 98, 108, 113),
    var(--status-bg-opacity)
  );
  color: var(--color-info);
  border: 1px solid
    rgba(var(--color-info-rgb, 98, 108, 113), var(--status-border-opacity));
}

/* Container layout */
.container {
  width: 100%;
  margin-right: auto;
  margin-left: auto;
  padding-right: var(--space-16);
  padding-left: var(--space-16);
}

@media (min-width: 640px) {
  .container {
    max-width: var(--container-sm);
  }
}
@media (min-width: 768px) {
  .container {
    max-width: var(--container-md);
  }
}
@media (min-width: 1024px) {
  .container {
    max-width: var(--container-lg);
  }
}
@media (min-width: 1280px) {
  .container {
    max-width: var(--container-xl);
  }
}

/* Utility classes */
.flex {
  display: flex;
}
.flex-col {
  flex-direction: column;
}
.items-center {
  align-items: center;
}
.justify-center {
  justify-content: center;
}
.justify-between {
  justify-content: space-between;
}
.gap-4 {
  gap: var(--space-4);
}
.gap-8 {
  gap: var(--space-8);
}
.gap-16 {
  gap: var(--space-16);
}

.m-0 {
  margin: 0;
}
.mt-8 {
  margin-top: var(--space-8);
}
.mb-8 {
  margin-bottom: var(--space-8);
}
.mx-8 {
  margin-left: var(--space-8);
  margin-right: var(--space-8);
}
.my-8 {
  margin-top: var(--space-8);
  margin-bottom: var(--space-8);
}

.p-0 {
  padding: 0;
}
.py-8 {
  padding-top: var(--space-8);
  padding-bottom: var(--space-8);
}
.px-8 {
  padding-left: var(--space-8);
  padding-right: var(--space-8);
}
.py-16 {
  padding-top: var(--space-16);
  padding-bottom: var(--space-16);
}
.px-16 {
  padding-left: var(--space-16);
  padding-right: var(--space-16);
}

.block {
  display: block;
}
.hidden {
  display: none;
}

/* Accessibility */
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
}

:focus-visible {
  outline: var(--focus-outline);
  outline-offset: 2px;
}

/* Dark mode specifics */
[data-color-scheme="dark"] .btn--outline {
  border: 1px solid var(--color-border-secondary);
}

@font-face {
  font-family: 'FKGroteskNeue';
  src: url('https://r2cdn.perplexity.ai/fonts/FKGroteskNeue.woff2')
    format('woff2');
}

/* END PERPLEXITY DESIGN SYSTEM */
/* Custom organic color palette */
:root {
  /* Organic colors */
  --color-organic-green: #22c55e;
  --color-organic-green-hover: #16a34a;
  --color-organic-green-light: #dcfce7;
  --color-earth-brown: #8c6b47;
  --color-earth-brown-light: #f3f0eb;
  --color-accent-orange: #f97316;
  --color-accent-orange-light: #fed7aa;
  
  /* Custom gradients */
  --gradient-primary: linear-gradient(135deg, var(--color-organic-green) 0%, var(--color-teal-500) 100%);
  --gradient-hero: linear-gradient(135deg, var(--color-organic-green-light) 0%, var(--color-teal-300) 20%, var(--color-accent-orange-light) 100%);
  --gradient-card: linear-gradient(145deg, var(--color-surface) 0%, rgba(var(--color-brown-600-rgb), 0.02) 100%);
  
  /* Custom shadows */
  --shadow-organic: 0 10px 30px rgba(34, 197, 94, 0.1);
  --shadow-card-hover: 0 20px 40px rgba(0, 0, 0, 0.1);
  --shadow-floating: 0 5px 20px rgba(34, 197, 94, 0.2);
  
  /* Animation variables */
  --animation-bounce: bounce 2s infinite;
  --animation-float: float 3s ease-in-out infinite;
  --animation-pulse-glow: pulse-glow 2s ease-in-out infinite;
}

/* Dark theme organic colors */
@media (prefers-color-scheme: dark) {
  :root {
    --color-organic-green-light: rgba(34, 197, 94, 0.1);
    --color-earth-brown-light: rgba(140, 107, 71, 0.1);
    --color-accent-orange-light: rgba(249, 115, 22, 0.1);
    --gradient-hero: linear-gradient(135deg, var(--color-charcoal-800) 0%, rgba(34, 197, 94, 0.05) 50%, rgba(249, 115, 22, 0.05) 100%);
  }
}

[data-color-scheme="dark"] {
  --color-organic-green-light: rgba(34, 197, 94, 0.1);
  --color-earth-brown-light: rgba(140, 107, 71, 0.1);
  --color-accent-orange-light: rgba(249, 115, 22, 0.1);
  --gradient-hero: linear-gradient(135deg, var(--color-charcoal-800) 0%, rgba(34, 197, 94, 0.05) 50%, rgba(249, 115, 22, 0.05) 100%);
}

/* Animations */
@keyframes float {
  0%, 100% { transform: translateY(0px) rotate(0deg); }
  50% { transform: translateY(-15px) rotate(5deg); }
}

@keyframes bounce {
  0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
  40% { transform: translateY(-10px); }
  60% { transform: translateY(-5px); }
}

@keyframes pulse-glow {
  0%, 100% { box-shadow: 0 0 10px rgba(34, 197, 94, 0.5); }
  50% { box-shadow: 0 0 20px rgba(34, 197, 94, 0.8); }
}

@keyframes slideInRight {
  from { transform: translateX(100%); opacity: 0; }
  to { transform: translateX(0); opacity: 1; }
}

@keyframes slideOutRight {
  from { transform: translateX(0); opacity: 1; }
  to { transform: translateX(100%); opacity: 0; }
}

@keyframes scaleIn {
  from { transform: scale(0.8); opacity: 0; }
  to { transform: scale(1); opacity: 1; }
}

@keyframes fadeInUp {
  from { transform: translateY(20px); opacity: 0; }
  to { transform: translateY(0); opacity: 1; }
}

@keyframes spin {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

@keyframes floatToCart {
  0% {
    transform: translateY(0) scale(1);
    opacity: 1;
  }
  50% {
    transform: translateY(-50px) scale(1.2);
    opacity: 0.8;
  }
  100% {
    transform: translateY(-100px) translateX(200px) scale(0.3);
    opacity: 0;
  }
}

/* Header Styles */
.header {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  z-index: 1000;
  background: rgba(var(--color-surface), 0.95);
  backdrop-filter: blur(10px);
  border-bottom: 1px solid var(--color-border);
  transition: all var(--duration-normal) var(--ease-standard);
}

.header__content {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: var(--space-16) 0;
  gap: var(--space-24);
}

.header__logo {
  display: flex;
  align-items: center;
  gap: var(--space-8);
  font-weight: var(--font-weight-bold);
  font-size: var(--font-size-xl);
  color: var(--color-organic-green);
}

.header__logo i {
  font-size: var(--font-size-2xl);
}

.header__nav {
  display: flex;
  gap: var(--space-24);
}

.nav-link {
  color: var(--color-text-secondary);
  font-weight: var(--font-weight-medium);
  text-decoration: none;
  transition: color var(--duration-fast) var(--ease-standard);
  position: relative;
}

.nav-link:hover,
.nav-link.active {
  color: var(--color-organic-green);
}

.nav-link.active::after {
  content: '';
  position: absolute;
  bottom: -8px;
  left: 0;
  right: 0;
  height: 2px;
  background: var(--gradient-primary);
  border-radius: var(--radius-full);
}

.header__actions {
  display: flex;
  align-items: center;
  gap: var(--space-12);
}

/* Search Styles */
.search-container {
  position: relative;
}

.search-btn {
  background: none;
  border: none;
  color: var(--color-text-secondary);
  font-size: var(--font-size-lg);
  cursor: pointer;
  padding: var(--space-8);
  border-radius: var(--radius-base);
  transition: all var(--duration-fast) var(--ease-standard);
}

.search-btn:hover {
  color: var(--color-organic-green);
  background: var(--color-organic-green-light);
}

.search-input-container {
  position: absolute;
  right: 0;
  top: 100%;
  margin-top: var(--space-8);
  display: flex;
  align-items: center;
  background: var(--color-surface);
  border: 1px solid var(--color-border);
  border-radius: var(--radius-lg);
  padding: var(--space-8);
  min-width: 280px;
  box-shadow: var(--shadow-lg);
  animation: fadeInUp 0.3s ease-out;
}

.search-input {
  border: none;
  background: none;
  outline: none;
  flex: 1;
  padding: var(--space-4) var(--space-8);
  color: var(--color-text);
  font-family: var(--font-family-base);
}

.search-close {
  background: none;
  border: none;
  color: var(--color-text-secondary);
  cursor: pointer;
  padding: var(--space-4);
  border-radius: var(--radius-base);
  transition: all var(--duration-fast) var(--ease-standard);
}

.search-close:hover {
  background: var(--color-secondary);
  color: var(--color-text);
}

/* Dropdown Styles */
.dropdown {
  position: relative;
}

.dropdown-btn {
  display: flex;
  align-items: center;
  gap: var(--space-6);
  background: none;
  border: none;
  color: var(--color-text-secondary);
  cursor: pointer;
  padding: var(--space-8);
  border-radius: var(--radius-base);
  transition: all var(--duration-fast) var(--ease-standard);
}

.dropdown-btn:hover {
  background: var(--color-secondary);
  color: var(--color-text);
}

.dropdown-menu {
  position: absolute;
  top: 100%;
  right: 0;
  margin-top: var(--space-8);
  background: var(--color-surface);
  border: 1px solid var(--color-border);
  border-radius: var(--radius-lg);
  box-shadow: var(--shadow-lg);
  min-width: 160px;
  overflow: hidden;
  animation: fadeInUp 0.3s ease-out;
}

.dropdown-item {
  display: flex;
  align-items: center;
  gap: var(--space-8);
  width: 100%;
  padding: var(--space-12) var(--space-16);
  background: none;
  border: none;
  color: var(--color-text);
  cursor: pointer;
  transition: background var(--duration-fast) var(--ease-standard);
}

.dropdown-item:hover {
  background: var(--color-secondary);
}

/* Theme Toggle */
.theme-toggle {
  background: none;
  border: none;
  color: var(--color-text-secondary);
  font-size: var(--font-size-lg);
  cursor: pointer;
  padding: var(--space-8);
  border-radius: var(--radius-base);
  transition: all var(--duration-fast) var(--ease-standard);
}

.theme-toggle:hover {
  color: var(--color-accent-orange);
  background: var(--color-accent-orange-light);
}

/* Profile and Cart Buttons */
.profile-btn,
.cart-btn {
  position: relative;
  background: none;
  border: none;
  color: var(--color-text-secondary);
  font-size: var(--font-size-lg);
  cursor: pointer;
  padding: var(--space-8);
  border-radius: var(--radius-base);
  transition: all var(--duration-fast) var(--ease-standard);
}

.profile-btn:hover,
.cart-btn:hover {
  color: var(--color-organic-green);
  background: var(--color-organic-green-light);
}

.cart-count {
  position: absolute;
  top: 0;
  right: 0;
  background: var(--color-accent-orange);
  color: white;
  font-size: var(--font-size-xs);
  font-weight: var(--font-weight-bold);
  padding: var(--space-2) var(--space-6);
  border-radius: var(--radius-full);
  min-width: 18px;
  text-align: center;
  display: none;
}

/* Sell Button */
.sell-btn {
  background: var(--gradient-primary);
  border: none;
  color: white;
  font-weight: var(--font-weight-medium);
  box-shadow: var(--shadow-organic);
  display: flex;
  align-items: center;
  gap: var(--space-8);
}

.sell-btn:hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow-card-hover);
}

/* Mobile Menu */
.mobile-menu-toggle {
  display: none;
  flex-direction: column;
  gap: 4px;
  background: none;
  border: none;
  cursor: pointer;
  padding: var(--space-8);
}

.mobile-menu-toggle span {
  width: 24px;
  height: 2px;
  background: var(--color-text);
  transition: all var(--duration-fast) var(--ease-standard);
}

/* Hero Section */
.hero {
  position: relative;
  min-height: 100vh;
  display: flex;
  align-items: center;
  background: var(--gradient-hero);
  overflow: hidden;
  padding-top: 80px;
}

.hero__background {
  position: absolute;
  inset: 0;
  z-index: 1;
}

.hero__floating-elements {
  position: absolute;
  inset: 0;
}

.floating-element {
  position: absolute;
  font-size: clamp(var(--font-size-2xl), 4vw, var(--font-size-4xl));
  opacity: 0.4;
  animation: var(--animation-float);
  pointer-events: none;
}

.floating-element--1 { top: 10%; left: 10%; animation-delay: 0s; }
.floating-element--2 { top: 20%; right: 15%; animation-delay: 0.5s; }
.floating-element--3 { top: 60%; left: 5%; animation-delay: 1s; }
.floating-element--4 { bottom: 20%; right: 10%; animation-delay: 1.5s; }
.floating-element--5 { top: 40%; left: 80%; animation-delay: 2s; }
.floating-element--6 { bottom: 40%; left: 70%; animation-delay: 2.5s; }
.floating-element--7 { top: 70%; right: 25%; animation-delay: 3s; }
.floating-element--8 { bottom: 50%; left: 20%; animation-delay: 3.5s; }

.hero__content {
  position: relative;
  z-index: 2;
  display: grid;
  grid-template-columns: 2fr 1fr;
  gap: var(--space-32);
  align-items: center;
  min-height: 80vh;
}

.hero__title {
  font-size: clamp(var(--font-size-3xl), 5vw, 60px);
  font-weight: var(--font-weight-bold);
  line-height: var(--line-height-tight);
  margin-bottom: var(--space-20);
  color: var(--color-text);
}

.title-main {
  display: block;
  margin-bottom: var(--space-8);
}

.highlight {
  background: var(--gradient-primary);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  display: block;
}

.hero__subtitle {
  font-size: var(--font-size-lg);
  color: var(--color-text-secondary);
  margin-bottom: var(--space-32);
  max-width: 500px;
  line-height: var(--line-height-normal);
}

.hero__stats {
  display: flex;
  gap: var(--space-32);
  margin-bottom: var(--space-32);
}

.stat {
  text-align: center;
}

.stat__number {
  font-size: var(--font-size-3xl);
  font-weight: var(--font-weight-bold);
  color: var(--color-organic-green);
  margin-bottom: var(--space-4);
}

.stat__label {
  font-size: var(--font-size-sm);
  color: var(--color-text-secondary);
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.hero__actions {
  display: flex;
  gap: var(--space-16);
  flex-wrap: wrap;
}

.hero__btn {
  min-width: 200px;
  display: flex;
  align-items: center;
  gap: var(--space-8);
}

.hero__testimonials {
  display: flex;
  flex-direction: column;
  gap: var(--space-20);
}

.testimonial {
  background: rgba(255, 255, 255, 0.8);
  backdrop-filter: blur(10px);
  padding: var(--space-24);
  border-radius: var(--radius-lg);
  border: 1px solid var(--color-border);
  animation: fadeInUp 1s ease-out 0.5s both;
}

.testimonial__rating {
  display: flex;
  gap: var(--space-2);
  margin-bottom: var(--space-12);
  color: var(--color-accent-orange);
}

.testimonial__text {
  font-style: italic;
  margin-bottom: var(--space-12);
  color: var(--color-text);
}

.testimonial__author {
  font-size: var(--font-size-sm);
  color: var(--color-text-secondary);
  font-weight: var(--font-weight-medium);
}

/* Products Section */
.products {
  padding: var(--space-32) 0;
  background: var(--color-background);
}

.section-header {
  text-align: center;
  margin-bottom: var(--space-32);
}

.section-title {
  font-size: var(--font-size-4xl);
  font-weight: var(--font-weight-bold);
  margin-bottom: var(--space-16);
  color: var(--color-text);
}

.section-subtitle {
  font-size: var(--font-size-lg);
  color: var(--color-text-secondary);
  max-width: 600px;
  margin: 0 auto;
}

/* Category Filter */
.category-filter {
  display: flex;
  justify-content: center;
  gap: var(--space-12);
  margin-bottom: var(--space-32);
  flex-wrap: wrap;
}

.category-btn {
  background: var(--color-surface);
  border: 1px solid var(--color-border);
  color: var(--color-text-secondary);
  padding: var(--space-12) var(--space-20);
  border-radius: var(--radius-full);
  cursor: pointer;
  transition: all var(--duration-fast) var(--ease-standard);
  font-weight: var(--font-weight-medium);
}

.category-btn:hover,
.category-btn.active {
  background: var(--color-organic-green);
  color: white;
  border-color: var(--color-organic-green);
  transform: translateY(-2px);
  box-shadow: var(--shadow-organic);
}

/* Products Grid */
.products-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
  gap: var(--space-24);
}

/* Product Card */
.product-card {
  background: var(--color-surface);
  border-radius: var(--radius-lg);
  border: 1px solid var(--color-card-border);
  overflow: hidden;
  transition: all var(--duration-normal) var(--ease-standard);
  position: relative;
  cursor: pointer;
  opacity: 0;
  transform: translateY(20px);
}

.product-card.visible {
  opacity: 1;
  transform: translateY(0);
}

.product-card:hover {
  transform: translateY(-8px);
  box-shadow: var(--shadow-card-hover);
  border-color: var(--color-organic-green);
}

.product-card__image-container {
  position: relative;
  height: 200px;
  overflow: hidden;
  background: var(--color-bg-3);
  display: flex;
  align-items: center;
  justify-content: center;
}

.product-card__image-placeholder {
  font-size: clamp(var(--font-size-3xl), 6vw, 72px);
  opacity: 0.8;
  transition: transform var(--duration-normal) var(--ease-standard);
}

.product-card:hover .product-card__image-placeholder {
  transform: scale(1.1);
}

.organic-badge {
  position: absolute;
  top: var(--space-12);
  left: var(--space-12);
  background: var(--color-organic-green);
  color: white;
  padding: var(--space-4) var(--space-8);
  border-radius: var(--radius-base);
  font-size: var(--font-size-xs);
  font-weight: var(--font-weight-bold);
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.favorite-btn {
  position: absolute;
  top: var(--space-12);
  right: var(--space-12);
  background: rgba(255, 255, 255, 0.9);
  border: none;
  color: var(--color-text-secondary);
  width: 40px;
  height: 40px;
  border-radius: var(--radius-full);
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all var(--duration-fast) var(--ease-standard);
}

.favorite-btn:hover,
.favorite-btn.active {
  background: var(--color-accent-orange);
  color: white;
  transform: scale(1.1);
}

.product-card__content {
  padding: var(--space-20);
}

.product-card__title {
  font-size: var(--font-size-lg);
  font-weight: var(--font-weight-semibold);
  margin-bottom: var(--space-8);
  color: var(--color-text);
}

.product-card__farm {
  font-size: var(--font-size-sm);
  color: var(--color-text-secondary);
  margin-bottom: var(--space-12);
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: var(--space-8);
}

.farm-info {
  display: flex;
  align-items: center;
  gap: var(--space-6);
}

.farm-rating {
  display: flex;
  align-items: center;
  gap: var(--space-4);
  color: var(--color-accent-orange);
  font-size: var(--font-size-xs);
}

.product-card__price-section {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: var(--space-16);
}

.price-container {
  display: flex;
  align-items: baseline;
  gap: var(--space-8);
}

.product-card__price {
  font-size: var(--font-size-xl);
  font-weight: var(--font-weight-bold);
  color: var(--color-organic-green);
}

.product-card__original-price {
  font-size: var(--font-size-md);
  color: var(--color-text-secondary);
  text-decoration: line-through;
}

.product-card__units {
  font-size: var(--font-size-sm);
  color: var(--color-text-secondary);
}

.stock-info {
  font-size: var(--font-size-xs);
  color: var(--color-text-secondary);
  text-align: right;
}

.stock-info.low-stock {
  color: var(--color-accent-orange);
  font-weight: var(--font-weight-medium);
}

.add-to-cart-btn {
  width: 100%;
  background: var(--gradient-primary);
  border: none;
  color: white;
  padding: var(--space-12) var(--space-16);
  border-radius: var(--radius-base);
  font-weight: var(--font-weight-medium);
  cursor: pointer;
  transition: all var(--duration-fast) var(--ease-standard);
  position: relative;
  overflow: hidden;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: var(--space-8);
}

.add-to-cart-btn:hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow-organic);
}

.add-to-cart-btn:active {
  transform: translateY(0);
}

.add-to-cart-btn.added {
  background: var(--color-organic-green);
}

.add-to-cart-btn.loading {
  pointer-events: none;
}

.btn-spinner {
  animation: spin 1s linear infinite;
}

/* Cart Drawer */
.cart-drawer {
  position: fixed;
  inset: 0;
  z-index: 2000;
  pointer-events: none;
}

.cart-drawer:not(.hidden) {
  pointer-events: all;
}

.cart-drawer__overlay {
  position: absolute;
  inset: 0;
  background: rgba(0, 0, 0, 0.5);
  opacity: 0;
  transition: opacity var(--duration-normal) var(--ease-standard);
}

.cart-drawer:not(.hidden) .cart-drawer__overlay {
  opacity: 1;
}

.cart-drawer__content {
  position: absolute;
  right: 0;
  top: 0;
  height: 100%;
  width: 400px;
  max-width: 90vw;
  background: var(--color-surface);
  border-left: 1px solid var(--color-border);
  display: flex;
  flex-direction: column;
  transform: translateX(100%);
  transition: transform var(--duration-normal) var(--ease-standard);
}

.cart-drawer:not(.hidden) .cart-drawer__content {
  transform: translateX(0);
}

.cart-drawer__header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: var(--space-20);
  border-bottom: 1px solid var(--color-border);
}

.cart-drawer__header h3 {
  font-size: var(--font-size-xl);
  font-weight: var(--font-weight-semibold);
  color: var(--color-text);
}

.cart-drawer__close {
  background: none;
  border: none;
  color: var(--color-text-secondary);
  font-size: var(--font-size-lg);
  cursor: pointer;
  padding: var(--space-8);
  border-radius: var(--radius-base);
  transition: all var(--duration-fast) var(--ease-standard);
}

.cart-drawer__close:hover {
  background: var(--color-secondary);
  color: var(--color-text);
}

.cart-drawer__body {
  flex: 1;
  overflow-y: auto;
  padding: var(--space-20);
}

/* Free Delivery Progress */
.free-delivery-progress {
  margin-bottom: var(--space-24);
  padding: var(--space-16);
  background: var(--color-organic-green-light);
  border-radius: var(--radius-lg);
  border: 1px solid rgba(34, 197, 94, 0.2);
}

.progress-info {
  display: flex;
  justify-content: space-between;
  margin-bottom: var(--space-8);
  font-size: var(--font-size-sm);
}

.progress-text {
  color: var(--color-text-secondary);
}

.progress-amount {
  color: var(--color-organic-green);
  font-weight: var(--font-weight-bold);
}

.progress-bar {
  height: 8px;
  background: rgba(34, 197, 94, 0.2);
  border-radius: var(--radius-full);
  overflow: hidden;
}

.progress-fill {
  height: 100%;
  background: var(--gradient-primary);
  border-radius: var(--radius-full);
  transition: width var(--duration-normal) var(--ease-standard);
  width: 0%;
}

/* Cart Items */
.cart-items {
  margin-bottom: var(--space-24);
}

.empty-cart {
  text-align: center;
  padding: var(--space-32);
  color: var(--color-text-secondary);
}

.empty-cart i {
  font-size: var(--font-size-4xl);
  margin-bottom: var(--space-16);
  opacity: 0.5;
}

.empty-cart__subtitle {
  font-size: var(--font-size-sm);
  margin-top: var(--space-8);
}

.cart-item {
  display: flex;
  gap: var(--space-12);
  padding: var(--space-16) 0;
  border-bottom: 1px solid var(--color-border);
}

.cart-item:last-child {
  border-bottom: none;
}

.cart-item__image {
  width: 60px;
  height: 60px;
  border-radius: var(--radius-base);
  background: var(--color-bg-3);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: var(--font-size-xl);
  flex-shrink: 0;
}

.cart-item__content {
  flex: 1;
  min-width: 0;
}

.cart-item__name {
  font-weight: var(--font-weight-medium);
  margin-bottom: var(--space-4);
  color: var(--color-text);
}

.cart-item__farm {
  font-size: var(--font-size-sm);
  color: var(--color-text-secondary);
  margin-bottom: var(--space-8);
}

.cart-item__controls {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.quantity-controls {
  display: flex;
  align-items: center;
  gap: var(--space-8);
}

.quantity-btn {
  background: var(--color-secondary);
  border: none;
  color: var(--color-text);
  width: 28px;
  height: 28px;
  border-radius: var(--radius-base);
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all var(--duration-fast) var(--ease-standard);
}

.quantity-btn:hover {
  background: var(--color-secondary-hover);
}

.quantity-btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.quantity-display {
  font-weight: var(--font-weight-medium);
  min-width: 24px;
  text-align: center;
}

.cart-item__price {
  font-weight: var(--font-weight-bold);
  color: var(--color-organic-green);
}

.remove-item-btn {
  background: none;
  border: none;
  color: var(--color-text-secondary);
  cursor: pointer;
  padding: var(--space-4);
  margin-left: var(--space-8);
  border-radius: var(--radius-base);
  transition: all var(--duration-fast) var(--ease-standard);
}

.remove-item-btn:hover {
  color: var(--color-error);
  background: rgba(var(--color-error-rgb), 0.1);
}

/* Promo Code */
.promo-code {
  display: flex;
  gap: var(--space-8);
  margin-bottom: var(--space-24);
}

.promo-code input {
  flex: 1;
}

/* Cart Footer */
.cart-drawer__footer {
  border-top: 1px solid var(--color-border);
  padding: var(--space-20);
}

.order-summary {
  margin-bottom: var(--space-20);
}

.summary-row {
  display: flex;
  justify-content: space-between;
  margin-bottom: var(--space-8);
  font-size: var(--font-size-sm);
}

.summary-row.total {
  font-size: var(--font-size-lg);
  font-weight: var(--font-weight-bold);
  color: var(--color-text);
  border-top: 1px solid var(--color-border);
  padding-top: var(--space-8);
  margin-top: var(--space-12);
}

.checkout-btn {
  background: var(--gradient-primary);
  color: white;
  font-weight: var(--font-weight-medium);
  box-shadow: var(--shadow-organic);
  display: flex;
  align-items: center;
  justify-content: center;
  gap: var(--space-8);
}

.checkout-btn:hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow-card-hover);
}

/* Loading Overlay */
.loading-overlay {
  position: fixed;
  inset: 0;
  background: rgba(0, 0, 0, 0.8);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 3000;
  opacity: 0;
  transition: opacity var(--duration-normal) var(--ease-standard);
}

.loading-overlay:not(.hidden) {
  opacity: 1;
}

.loading-spinner {
  text-align: center;
  color: white;
}

.loading-spinner i {
  font-size: var(--font-size-4xl);
  margin-bottom: var(--space-16);
  color: var(--color-organic-green);
}

/* Toast Notifications */
.toast {
  position: fixed;
  top: 100px;
  right: var(--space-20);
  background: var(--color-organic-green);
  color: white;
  padding: var(--space-12) var(--space-20);
  border-radius: var(--radius-lg);
  display: flex;
  align-items: center;
  gap: var(--space-8);
  box-shadow: var(--shadow-lg);
  z-index: 4000;
  transform: translateX(400px);
  transition: transform var(--duration-normal) var(--ease-standard);
}

.toast:not(.hidden) {
  transform: translateX(0);
}

/* Responsive Design */
@media (max-width: 768px) {
  .header__nav {
    display: none;
  }
  
  .mobile-menu-toggle {
    display: flex;
  }
  
  .header__actions {
    gap: var(--space-8);
  }
  
  .sell-btn .sell-text {
    display: none;
  }
  
  .hero__content {
    grid-template-columns: 1fr;
    gap: var(--space-24);
    text-align: center;
  }
  
  .hero__stats {
    justify-content: center;
  }
  
  .hero__actions {
    justify-content: center;
  }
  
  .hero__btn {
    min-width: auto;
    flex: 1;
  }
  
  .products-grid {
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: var(--space-16);
  }
  
  .cart-drawer__content {
    width: 100%;
  }
  
  .dropdown-menu {
    right: auto;
    left: 0;
  }
  
  .search-input-container {
    right: auto;
    left: 0;
    min-width: 250px;
  }
}

@media (max-width: 480px) {
  .hero__actions {
    flex-direction: column;
  }
  
  .category-filter {
    flex-direction: column;
    align-items: center;
  }
  
  .products-grid {
    grid-template-columns: 1fr;
  }
  
  .hero__stats {
    flex-direction: column;
    gap: var(--space-16);
  }
  
  .floating-element {
    font-size: var(--font-size-2xl);
  }
}

/* Utility Classes */
.hidden {
  display: none !important;
}
</file>

<file path="tailwind-config.js">
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: 'class',
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        // Органическая палитра для FarmSharing
        primary: {
          50: '#f0fdf4',
          100: '#dcfce7',
          200: '#bbf7d0',
          300: '#86efac',
          400: '#4ade80',
          500: '#22c55e', // Основной зеленый
          600: '#16a34a',
          700: '#15803d',
          800: '#166534',
          900: '#14532d',
          950: '#052e16',
        },
        earth: {
          50: '#f8f6f0',
          100: '#e8e2d1',
          200: '#d1c5a3',
          300: '#baa775',
          400: '#a3895c',
          500: '#8c6b47',
          600: '#75583c',
          700: '#5e4530',
          800: '#473425',
          900: '#30231a',
        },
        accent: {
          50: '#fff7ed',
          100: '#ffedd5',
          200: '#fed7aa',
          300: '#fdba74',
          400: '#fb923c',
          500: '#f97316', // Акцентный оранжевый
          600: '#ea580c',
          700: '#c2410c',
          800: '#9a3412',
          900: '#7c2d12',
        },
        // Нейтральные цвета
        gray: {
          50: '#f8fafc',
          100: '#f1f5f9',
          200: '#e2e8f0',
          300: '#cbd5e1',
          400: '#94a3b8',
          500: '#64748b',
          600: '#475569',
          700: '#334155',
          800: '#1e293b',
          900: '#0f172a',
          950: '#020617',
        }
      },
      fontFamily: {
        sans: ['Inter', 'system-ui', 'sans-serif'],
        display: ['Inter', 'system-ui', 'sans-serif'],
      },
      animation: {
        'fade-in': 'fadeIn 0.5s ease-in-out',
        'slide-up': 'slideUp 0.5s ease-out',
        'slide-down': 'slideDown 0.5s ease-out',
        'scale-in': 'scaleIn 0.3s ease-out',
        'bounce-soft': 'bounceSoft 0.6s ease-out',
        'pulse-soft': 'pulseSoft 2s infinite',
        'float': 'float 3s ease-in-out infinite',
        'glow': 'glow 2s ease-in-out infinite alternate',
      },
      keyframes: {
        fadeIn: {
          '0%': { opacity: '0' },
          '100%': { opacity: '1' },
        },
        slideUp: {
          '0%': { transform: 'translateY(100%)', opacity: '0' },
          '100%': { transform: 'translateY(0)', opacity: '1' },
        },
        slideDown: {
          '0%': { transform: 'translateY(-100%)', opacity: '0' },
          '100%': { transform: 'translateY(0)', opacity: '1' },
        },
        scaleIn: {
          '0%': { transform: 'scale(0)', opacity: '0' },
          '100%': { transform: 'scale(1)', opacity: '1' },
        },
        bounceSoft: {
          '0%, 20%, 53%, 80%, 100%': { transform: 'translateY(0)' },
          '40%, 43%': { transform: 'translateY(-10px)' },
          '70%': { transform: 'translateY(-5px)' },
          '90%': { transform: 'translateY(-2px)' },
        },
        pulseSoft: {
          '0%, 100%': { opacity: '0.6' },
          '50%': { opacity: '1' },
        },
        float: {
          '0%, 100%': { transform: 'translateY(0px)' },
          '50%': { transform: 'translateY(-10px)' },
        },
        glow: {
          '0%': { boxShadow: '0 0 5px rgba(34, 197, 94, 0.2), 0 0 10px rgba(34, 197, 94, 0.2), 0 0 15px rgba(34, 197, 94, 0.2)' },
          '100%': { boxShadow: '0 0 10px rgba(34, 197, 94, 0.4), 0 0 20px rgba(34, 197, 94, 0.4), 0 0 30px rgba(34, 197, 94, 0.4)' },
        },
      },
      backdropFilter: {
        'none': 'none',
        'blur': 'blur(20px)',
      },
      boxShadow: {
        'organic': '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06), 0 0 0 1px rgba(34, 197, 94, 0.05)',
        'organic-lg': '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05), 0 0 0 1px rgba(34, 197, 94, 0.1)',
        'organic-xl': '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04), 0 0 0 1px rgba(34, 197, 94, 0.1)',
        'green-glow': '0 0 20px rgba(34, 197, 94, 0.3)',
        'earth-glow': '0 0 20px rgba(140, 107, 71, 0.3)',
        'accent-glow': '0 0 20px rgba(249, 115, 22, 0.3)',
      },
      gradients: {
        'organic': 'linear-gradient(135deg, #22c55e 0%, #16a34a 100%)',
        'earth': 'linear-gradient(135deg, #a3895c 0%, #8c6b47 100%)',
        'sunset': 'linear-gradient(135deg, #f97316 0%, #ea580c 100%)',
        'nature': 'linear-gradient(135deg, #22c55e 0%, #16a34a 50%, #15803d 100%)',
        'sky': 'linear-gradient(135deg, #0ea5e9 0%, #0284c7 100%)',
      },
      backgroundImage: {
        'hero-pattern': "url('data:image/svg+xml,%3Csvg width=\"60\" height=\"60\" viewBox=\"0 0 60 60\" xmlns=\"http://www.w3.org/2000/svg\"%3E%3Cg fill=\"none\" fill-rule=\"evenodd\"%3E%3Cg fill=\"%2322c55e\" fill-opacity=\"0.05\"%3E%3Ccircle cx=\"30\" cy=\"30\" r=\"2\"/%3E%3C/g%3E%3C/g%3E%3C/svg%3E')",
        'organic-pattern': "url('data:image/svg+xml,%3Csvg width=\"100\" height=\"20\" viewBox=\"0 0 100 20\" xmlns=\"http://www.w3.org/2000/svg\"%3E%3Cpath d=\"M21.184 20c.357-.13.72-.264 1.088-.402l1.768-.661C33.64 15.347 39.647 14 50 14c10.271 0 15.362 1.222 24.629 4.928.955.383 1.869.74 2.75 1.072h6.225c-2.51-.73-5.139-1.691-8.233-2.928C65.888 13.278 60.562 12 50 12c-10.626 0-16.855 1.397-26.66 5.063l-1.767.662c-2.475.923-4.66 1.674-6.724 2.275h6.335zm0-20C13.258 2.892 8.077 4 0 4V2c5.744 0 9.951-.574 14.85-2h6.334zM77.38 0C85.239 2.966 90.502 4 100 4V2c-6.842 0-11.386-.542-16.396-2h-6.225zM0 14c8.44 0 13.718-1.21 22.272-4.402l1.768-.661C33.64 5.347 39.647 4 50 4c10.271 0 15.362 1.222 24.629 4.928C84.112 12.722 89.438 14 100 14v-2c-10.271 0-15.362-1.222-24.629-4.928C65.888 3.278 60.562 2 50 2 39.374 2 33.145 3.397 23.34 7.063l-1.767.662C13.223 10.84 8.163 12 0 12v2z\" fill=\"%2322c55e\" fill-opacity=\"0.02\" fill-rule=\"evenodd\"/%3E%3C/svg%3E')",
      },
      spacing: {
        '18': '4.5rem',
        '88': '22rem',
        '128': '32rem',
      },
    },
  },
  plugins: [
    require('@tailwindcss/forms'),
    require('@tailwindcss/typography'),
    // Кастомные утилиты
    function({ addUtilities }) {
      const newUtilities = {
        '.gradient-organic': {
          background: 'linear-gradient(135deg, #22c55e 0%, #16a34a 100%)',
        },
        '.gradient-earth': {
          background: 'linear-gradient(135deg, #a3895c 0%, #8c6b47 100%)',
        },
        '.gradient-sunset': {
          background: 'linear-gradient(135deg, #f97316 0%, #ea580c 100%)',
        },
        '.glass': {
          'backdrop-filter': 'blur(20px)',
          'background': 'rgba(255, 255, 255, 0.1)',
          'border': '1px solid rgba(255, 255, 255, 0.2)',
        },
        '.glass-dark': {
          'backdrop-filter': 'blur(20px)',
          'background': 'rgba(0, 0, 0, 0.1)',
          'border': '1px solid rgba(255, 255, 255, 0.1)',
        },
        '.text-gradient': {
          'background': 'linear-gradient(135deg, #22c55e 0%, #16a34a 100%)',
          'background-clip': 'text',
          'color': 'transparent',
        },
        '.hover-lift': {
          'transition': 'transform 0.3s ease, box-shadow 0.3s ease',
          '&:hover': {
            'transform': 'translateY(-4px)',
            'box-shadow': '0 10px 25px rgba(0, 0, 0, 0.1)',
          },
        },
        '.card-organic': {
          'background': 'rgba(255, 255, 255, 0.95)',
          'backdrop-filter': 'blur(10px)',
          'border': '1px solid rgba(34, 197, 94, 0.1)',
          'border-radius': '1rem',
          'box-shadow': '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06), 0 0 0 1px rgba(34, 197, 94, 0.05)',
        },
      }
      addUtilities(newUtilities)
    },
  ],
}
</file>

<file path="types-index.ts">
// Типы для товаров
export interface Product {
  id: string
  title: string
  description: string
  category: ProductCategory
  price: number
  originalPrice?: number // Для отображения скидок
  units: string // 'kg', 'lb', 'dozen', 'jar', etc.
  amount: number // Количество в наличии
  image: string
  images?: string[] // Дополнительные изображения
  isOrganic: boolean
  isFeatured?: boolean
  farm: Farm
  nutritionInfo?: NutritionInfo
  tags?: string[]
  createdAt: Date
  updatedAt: Date
}

// Типы для фермеров
export interface Farm {
  id: string
  name: string
  description?: string
  city: string
  region: string
  address?: string
  rating: number
  reviewsCount: number
  isVerified: boolean
  isOrganic: boolean
  foundedYear?: number
  specialties: string[]
  contactInfo: {
    phone?: string
    email?: string
    website?: string
  }
  socialMedia?: {
    instagram?: string
    facebook?: string
  }
  avatar?: string
  coverImage?: string
  productsCount: number
  followersCount: number
}

// Категории товаров
export type ProductCategory = 
  | 'fruits'
  | 'vegetables' 
  | 'herbs'
  | 'dairy'
  | 'pantry'
  | 'meat'
  | 'grains'
  | 'nuts'
  | 'honey'
  | 'eggs'

// Информация о пищевой ценности
export interface NutritionInfo {
  calories: number
  protein: number
  carbs: number
  fat: number
  fiber: number
  vitamins: string[]
}

// Типы для корзины
export interface CartItem {
  id: string
  name: string
  price: number
  quantity: number
  image: string
  farmer: string
  maxQuantity?: number
}

// Типы для заказов
export interface Order {
  id: string
  userId: string
  items: CartItem[]
  totalPrice: number
  status: OrderStatus
  paymentMethod: PaymentMethod
  deliveryAddress: Address
  estimatedDelivery: Date
  createdAt: Date
  farmerId: string
}

export type OrderStatus = 
  | 'pending'
  | 'confirmed' 
  | 'preparing'
  | 'ready'
  | 'delivered'
  | 'cancelled'

export type PaymentMethod = 
  | 'credit_card'
  | 'paypal'
  | 'bank_transfer'
  | 'cash_on_delivery'

// Адрес доставки
export interface Address {
  street: string
  city: string
  zipCode: string
  country: string
  coordinates?: {
    lat: number
    lng: number
  }
}

// Типы для пользователей
export interface User {
  id: string
  name: string
  email: string
  avatar?: string
  phone?: string
  addresses: Address[]
  preferences: UserPreferences
  createdAt: Date
}

export interface UserPreferences {
  language: 'en' | 'he' | 'ar' | 'ru'
  currency: 'ILS' | 'USD' | 'EUR'
  theme: 'light' | 'dark' | 'system'
  notifications: {
    email: boolean
    push: boolean
    sms: boolean
  }
  dietary: {
    vegetarian: boolean
    vegan: boolean
    glutenFree: boolean
    kosher: boolean
    halal: boolean
  }
}

// Типы для фильтров
export interface ProductFilters {
  category?: ProductCategory[]
  priceRange?: {
    min: number
    max: number
  }
  location?: string[]
  isOrganic?: boolean
  rating?: number
  availability?: boolean
  sortBy?: 'price' | 'rating' | 'distance' | 'newest'
  sortOrder?: 'asc' | 'desc'
}

// Типы для поиска
export interface SearchQuery {
  query: string
  filters: ProductFilters
  page: number
  limit: number
}

export interface SearchResults {
  products: Product[]
  totalCount: number
  hasMore: boolean
  facets: {
    categories: { name: string; count: number }[]
    priceRanges: { range: string; count: number }[]
    locations: { name: string; count: number }[]
  }
}
</file>

<file path="utils.ts">
import { type ClassValue, clsx } from 'clsx'
import { twMerge } from 'tailwind-merge'

// Утилита для объединения классов Tailwind
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

// Форматирование цены с валютой
export function formatPrice(price: number, currency: 'ILS' | 'USD' | 'EUR' = 'ILS'): string {
  const symbols = {
    ILS: '₪',
    USD: '$',
    EUR: '€'
  }
  
  return `${symbols[currency]}${price.toFixed(2)}`
}

// Форматирование даты
export function formatDate(date: Date | string): string {
  const d = new Date(date)
  return d.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric'
  })
}

// Расчет расстояния между точками (примерно)
export function calculateDistance(
  lat1: number, 
  lon1: number, 
  lat2: number, 
  lon2: number
): number {
  const R = 6371 // Радиус Земли в км
  const dLat = (lat2 - lat1) * Math.PI / 180
  const dLon = (lon2 - lon1) * Math.PI / 180
  const a = 
    Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
    Math.sin(dLon/2) * Math.sin(dLon/2)
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a))
  return R * c
}

// Генерация уникального ID
export function generateId(): string {
  return Math.random().toString(36).substr(2, 9)
}

// Дебаунс функция для поиска
export function debounce<T extends (...args: any[]) => any>(
  func: T,
  wait: number
): (...args: Parameters<T>) => void {
  let timeout: NodeJS.Timeout
  return (...args: Parameters<T>) => {
    clearTimeout(timeout)
    timeout = setTimeout(() => func(...args), wait)
  }
}

// Проверка валидности email
export function isValidEmail(email: string): boolean {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
  return emailRegex.test(email)
}

// Проверка валидности израильского номера телефона
export function isValidIsraeliPhone(phone: string): boolean {
  const phoneRegex = /^(\+972|0)([2-9]\d{7,8})$/
  return phoneRegex.test(phone.replace(/[-\s]/g, ''))
}

// Сокращение текста
export function truncateText(text: string, maxLength: number): string {
  if (text.length <= maxLength) return text
  return text.substr(0, maxLength) + '...'
}

// Капитализация первой буквы
export function capitalize(str: string): string {
  return str.charAt(0).toUpperCase() + str.slice(1)
}

// Слагификация текста для URL
export function slugify(text: string): string {
  return text
    .toLowerCase()
    .replace(/[^\w\s-]/g, '')
    .replace(/[\s_-]+/g, '-')
    .replace(/^-+|-+$/g, '')
}

// Получение инициалов из имени
export function getInitials(name: string): string {
  return name
    .split(' ')
    .map(word => word.charAt(0))
    .join('')
    .toUpperCase()
}

// Генерация случайного цвета для аватара
export function getRandomColor(): string {
  const colors = [
    '#ef4444', '#f97316', '#f59e0b', '#eab308',
    '#84cc16', '#22c55e', '#10b981', '#14b8a6',
    '#06b6d4', '#0ea5e9', '#3b82f6', '#6366f1',
    '#8b5cf6', '#a855f7', '#d946ef', '#ec4899'
  ]
  return colors[Math.floor(Math.random() * colors.length)]
}

// Проверка, является ли изображение валидным
export function isValidImageUrl(url: string): Promise<boolean> {
  return new Promise((resolve) => {
    const img = new Image()
    img.onload = () => resolve(true)
    img.onerror = () => resolve(false)
    img.src = url
  })
}

// Конвертация файла в base64
export function fileToBase64(file: File): Promise<string> {
  return new Promise((resolve, reject) => {
    const reader = new FileReader()
    reader.readAsDataURL(file)
    reader.onload = () => resolve(reader.result as string)
    reader.onerror = error => reject(error)
  })
}

// Форматирование числа с разделителями тысяч
export function formatNumber(num: number): string {
  return num.toLocaleString()
}

// Проверка мобильного устройства
export function isMobile(): boolean {
  return typeof window !== 'undefined' && window.innerWidth < 768
}

// Плавная прокрутка к элементу
export function scrollToElement(elementId: string): void {
  const element = document.getElementById(elementId)
  if (element) {
    element.scrollIntoView({ behavior: 'smooth' })
  }
}

// Копирование текста в буфер обмена
export async function copyToClipboard(text: string): Promise<boolean> {
  try {
    await navigator.clipboard.writeText(text)
    return true
  } catch {
    return false
  }
}

// Получение контрастного цвета для текста
export function getContrastColor(hexColor: string): string {
  const r = parseInt(hexColor.substr(1, 2), 16)
  const g = parseInt(hexColor.substr(3, 2), 16)
  const b = parseInt(hexColor.substr(5, 2), 16)
  const brightness = (r * 299 + g * 587 + b * 114) / 1000
  return brightness > 128 ? '#000000' : '#ffffff'
}

// Валидация израильского почтового индекса
export function isValidIsraeliPostalCode(code: string): boolean {
  const postalCodeRegex = /^\d{5,7}$/
  return postalCodeRegex.test(code)
}

// Получение времени относительно сейчас (например, "2 hours ago")
export function getRelativeTime(date: Date | string): string {
  const now = new Date()
  const targetDate = new Date(date)
  const diffInSeconds = Math.floor((now.getTime() - targetDate.getTime()) / 1000)

  if (diffInSeconds < 60) return 'just now'
  if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} minutes ago`
  if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} hours ago`
  if (diffInSeconds < 2592000) return `${Math.floor(diffInSeconds / 86400)} days ago`
  
  return formatDate(targetDate)
}

// Генерация SEO-дружественного мета-описания
export function generateMetaDescription(text: string, maxLength: number = 160): string {
  const cleanText = text.replace(/<[^>]*>/g, '').replace(/\s+/g, ' ').trim()
  if (cleanText.length <= maxLength) return cleanText
  
  const truncated = cleanText.substr(0, maxLength)
  const lastSpace = truncated.lastIndexOf(' ')
  return truncated.substr(0, lastSpace) + '...'
}
</file>

</files>
