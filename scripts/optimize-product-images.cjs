#!/usr/bin/env node
// üñºÔ∏è –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
// –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ò–°–ü–û–õ–¨–ó–£–ï–ú–´–ï –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!

const sharp = require('sharp');
const path = require('path');
const fs = require('fs');

// –ü—É—Ç–∏
const ASSETS_DIR = path.join(__dirname, '../src/assets');
const OPTIMIZED_DIR = path.join(ASSETS_DIR, 'optimized');

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (!fs.existsSync(OPTIMIZED_DIR)) {
  fs.mkdirSync(OPTIMIZED_DIR, { recursive: true });
}

console.log('üéØ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫...');
console.log('');

async function optimizeCardImage() {
  const inputPath = path.join(ASSETS_DIR, 'card image.jpg');
  
  if (!fs.existsSync(inputPath)) {
    console.error('‚ùå –§–∞–π–ª card image.jpg –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    return;
  }

  console.log('üÉè –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º card image.jpg (default –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)...');
  
  try {
    // 1. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ (300x200)
    console.log('  üì¶ –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫...');
    await sharp(inputPath)
      .resize(300, 200, { fit: 'cover' })
      .jpeg({ quality: 75, progressive: true })
      .toFile(path.join(OPTIMIZED_DIR, 'card-image-optimized.jpg'));

    // 2. –ú–∞–ª–µ–Ω—å–∫–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ø—Ä–µ–≤—å—é (150x100)
    console.log('  üîç –°–æ–∑–¥–∞–µ–º –º–∞–ª–µ–Ω—å–∫—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –ø—Ä–µ–≤—å—é...');
    await sharp(inputPath)
      .resize(150, 100, { fit: 'cover' })
      .jpeg({ quality: 70, progressive: true })
      .toFile(path.join(OPTIMIZED_DIR, 'card-image-small.jpg'));

    // 3. WebP –≤–µ—Ä—Å–∏–∏
    console.log('  üåê –°–æ–∑–¥–∞–µ–º WebP –≤–µ—Ä—Å–∏–∏...');
    
    // WebP –æ—Å–Ω–æ–≤–Ω–∞—è
    await sharp(inputPath)
      .resize(300, 200, { fit: 'cover' })
      .webp({ quality: 75 })
      .toFile(path.join(OPTIMIZED_DIR, 'card-image-optimized.webp'));
    
    // WebP –º–∞–ª–µ–Ω—å–∫–∞—è
    await sharp(inputPath)
      .resize(150, 100, { fit: 'cover' })
      .webp({ quality: 70 })
      .toFile(path.join(OPTIMIZED_DIR, 'card-image-small.webp'));

    console.log('');
    console.log('‚úÖ card image.jpg —É—Å–ø–µ—à–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ card image.jpg:', error.message);
  }
}

async function getFileSize(filePath) {
  try {
    const stats = fs.statSync(filePath);
    return (stats.size / 1024).toFixed(1) + ' KB';
  } catch {
    return 'N/A';
  }
}

async function showResults() {
  console.log('');
  console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ö–ê–†–¢–û–ß–ï–ö:');
  console.log('');
  
  const originalSize = await getFileSize(path.join(ASSETS_DIR, 'card image.jpg'));
  console.log(`üî∏ –û—Ä–∏–≥–∏–Ω–∞–ª: card image.jpg (${originalSize})`);
  console.log('');
  
  console.log('üî∏ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:');
  
  const variants = [
    'card-image-optimized.jpg',
    'card-image-small.jpg',
    'card-image-optimized.webp',
    'card-image-small.webp'
  ];
  
  for (const variant of variants) {
    const size = await getFileSize(path.join(OPTIMIZED_DIR, variant));
    console.log(`   - ${variant} (${size})`);
  }
  
  console.log('');
  console.log('‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  console.log('üìÅ –û—Ä–∏–≥–∏–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: src/assets/');
  console.log('üìÅ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤: src/assets/optimized/');
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    await optimizeCardImage();
    await showResults();
    
    console.log('');
    console.log('üéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
    console.log('1. –û–±–Ω–æ–≤–∏—Ç—å imageUtils.ts –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    console.log('2. –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –≤ ProductCard –∫–æ–º–ø–æ–Ω–µ–Ω—Ç (–∏—Å–ø—Ä–∞–≤–∏—Ç—å CLS)');
    console.log('3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å');
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
main();