// üìä –ü—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ JSON —Ñ–∞–π–ª
const fs = require('fs');
const path = require('path');

const ORDERS_FILE = path.join(__dirname, 'orders.json');

// üîç –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ data —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
const ensureDataDirectory = () => {
  const dataDir = path.dirname(ORDERS_FILE);
  if (!fs.existsSync(dataDir)) {
    fs.mkdirSync(dataDir, { recursive: true });
  }
};

// üìñ –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞
const loadOrders = () => {
  try {
    ensureDataDirectory();

    if (!fs.existsSync(ORDERS_FILE)) {
      // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      saveOrders([]);
      return [];
    }

    const data = fs.readFileSync(ORDERS_FILE, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.error('‚ùå Error loading orders:', error);
    return [];
  }
};

// üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ JSON —Ñ–∞–π–ª
const saveOrders = (orders) => {
  try {
    ensureDataDirectory();
    fs.writeFileSync(ORDERS_FILE, JSON.stringify(orders, null, 2), 'utf8');
    console.log('‚úÖ Orders saved to JSON file');
    return true;
  } catch (error) {
    console.error('‚ùå Error saving orders:', error);
    return false;
  }
};

// üî¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ ID
const getNextId = (orders) => {
  return orders.length > 0 ? Math.max(...orders.map((o) => o.id)) + 1 : 1;
};

// üßæ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã
const getAllOrders = () => loadOrders();

// üë§ –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getOrdersByUser = (userId) => {
  const orders = loadOrders();
  return orders.filter((o) => parseInt(o.userId) === parseInt(userId));
};

// üîç –ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑ –ø–æ ID
const findOrderById = (id) => {
  const orders = loadOrders();
  return orders.find((o) => o.id === parseInt(id));
};

// ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑
const addOrder = (orderData) => {
  try {
    const orders = loadOrders();
    const now = new Date().toISOString();

    const order = {
      id: getNextId(orders),
      status: orderData.status || 'pending',
      createdAt: now,
      updatedAt: now,
      ...orderData,
    };

    orders.push(order);
    if (saveOrders(orders)) {
      console.log(`‚úÖ New order created: ID ${order.id} (userId: ${order.userId})`);
      return order;
    }
    throw new Error('Failed to save orders');
  } catch (error) {
    console.error('‚ùå Error adding order:', error);
    return null;
  }
};

// ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑
const updateOrder = (id, patch) => {
  try {
    const orders = loadOrders();
    const idx = orders.findIndex((o) => o.id === parseInt(id));
    if (idx === -1) return null;

    orders[idx] = { ...orders[idx], ...patch, updatedAt: new Date().toISOString() };

    if (saveOrders(orders)) {
      console.log(`‚úÖ Order updated: ID ${id}`);
      return orders[idx];
    }
    throw new Error('Failed to save orders');
  } catch (error) {
    console.error('‚ùå Error updating order:', error);
    return null;
  }
};

module.exports = {
  loadOrders,
  saveOrders,
  getAllOrders,
  getOrdersByUser,
  findOrderById,
  addOrder,
  updateOrder,
};


