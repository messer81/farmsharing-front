// üõí –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ—Ä–∑–∏–Ω–æ–π —á–µ—Ä–µ–∑ Redux –∏ API
import { useDispatch, useSelector } from 'react-redux';
import { useEffect } from 'react';
import {
    addToCart, removeFromCart, updateQuantity, clearCart as clearCartAction,
    openCart, closeCart, toggleCart, setCartItems, setLoading, setError,
    selectCartItems, selectCartIsOpen, selectTotalItems, selectTotalPrice,
    selectCartLoading, selectCartError
} from './cartSlice';
import { useCart as useCartApi } from '../../../shared/api/useApi';
import type { Product } from '../../../types';

export const useCart = () => {
    const dispatch = useDispatch();

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è Redux
    const items = useSelector(selectCartItems);
    const isOpen = useSelector(selectCartIsOpen);
    const totalItems = useSelector(selectTotalItems);
    const totalPrice = useSelector(selectTotalPrice);
    const loading = useSelector(selectCartLoading);
    const error = useSelector(selectCartError);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API —Ö—É–∫ –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã
    const cartApi = useCartApi();
    const { data: apiCart, loading: apiLoading, error: apiError, execute: fetchCart } = cartApi.getCart();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    useEffect(() => {
        fetchCart();
    }, [fetchCart]);

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ API —Å Redux
    useEffect(() => {
        if (apiCart?.data) {
            dispatch(setCartItems(apiCart.data.items || []));
            dispatch(setLoading(false));
        }
    }, [apiCart, dispatch]);

    useEffect(() => {
        if (apiLoading) {
            dispatch(setLoading(true));
        }
    }, [apiLoading, dispatch]);

    useEffect(() => {
        if (apiError) {
            dispatch(setError(apiError));
        }
    }, [apiError, dispatch]);

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ—Ä–∑–∏–Ω–æ–π
    const addItem = async (product: Product, quantity: number = 1) => {
        try {
            dispatch(setLoading(true));
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ Redux –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ UI
            dispatch(addToCart({ product, quantity }));
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Å–µ—Ä–≤–µ—Ä–æ–º
            const addToCartApi = cartApi.addToCart(product.id, quantity);
            await addToCartApi.execute();
            
            dispatch(setLoading(false));
        } catch (err) {
            dispatch(setError(err instanceof Error ? err.message : 'Failed to add item to cart'));
            // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Redux –ø—Ä–∏ –æ—à–∏–±–∫–µ
            dispatch(removeFromCart(product.id));
        }
    };

    const removeItem = async (productId: number) => {
        try {
            dispatch(setLoading(true));
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ Redux –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ UI
            dispatch(removeFromCart(productId));
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Å–µ—Ä–≤–µ—Ä–æ–º
            const removeFromCartApi = cartApi.removeFromCart(productId);
            await removeFromCartApi.execute();
            
            dispatch(setLoading(false));
        } catch (err) {
            dispatch(setError(err instanceof Error ? err.message : 'Failed to remove item from cart'));
            // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É —Å —Å–µ—Ä–≤–µ—Ä–∞
            fetchCart();
        }
    };

    const updateItemQuantity = async (productId: number, quantity: number) => {
        try {
            dispatch(setLoading(true));
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ Redux –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ UI
            dispatch(updateQuantity({ productId, quantity }));
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Å–µ—Ä–≤–µ—Ä–æ–º
            const updateCartItemApi = cartApi.updateCartItem(productId, quantity);
            await updateCartItemApi.execute();
            
            dispatch(setLoading(false));
        } catch (err) {
            dispatch(setError(err instanceof Error ? err.message : 'Failed to update item quantity'));
            // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É —Å —Å–µ—Ä–≤–µ—Ä–∞
            fetchCart();
        }
    };

    const clearCart = async () => {
        try {
            dispatch(setLoading(true));
            
            // –û—á–∏—â–∞–µ–º –≤ Redux –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ UI
            dispatch(clearCartAction());
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Å–µ—Ä–≤–µ—Ä–æ–º
            const clearCartApi = cartApi.clearCart();
            await clearCartApi.execute();
            
            dispatch(setLoading(false));
        } catch (err) {
            dispatch(setError(err instanceof Error ? err.message : 'Failed to clear cart'));
            // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É —Å —Å–µ—Ä–≤–µ—Ä–∞
            fetchCart();
        }
    };

    const open = () => {
        dispatch(openCart());
    };

    const close = () => {
        dispatch(closeCart());
    };

    const toggle = () => {
        dispatch(toggleCart());
    };

    // –û–±–Ω–æ–≤–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É —Å —Å–µ—Ä–≤–µ—Ä–∞
    const refreshCart = async () => {
        try {
            await fetchCart();
        } catch (err) {
            dispatch(setError(err instanceof Error ? err.message : 'Failed to refresh cart'));
        }
    };

    return {
        // –î–∞–Ω–Ω—ã–µ
        items,
        isOpen,
        totalItems,
        totalPrice,
        loading: loading || apiLoading,
        error: error || apiError,

        // API –¥–∞–Ω–Ω—ã–µ
        apiCart: apiCart?.data,
        apiLoading,
        apiError,

        // –ú–µ—Ç–æ–¥—ã
        addItem,
        removeItem,
        updateItemQuantity,
        clearCart,
        open,
        close,
        toggle,
        refreshCart,
    };
};