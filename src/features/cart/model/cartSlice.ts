// üõí Redux Toolkit —Å–ª–∞–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
// –≠—Ç–æ –º—ã –æ—Å—Ç–∞–≤–ª—è–µ–º –∏ —É–ª—É—á—à–∞–µ–º
import { createSlice, type PayloadAction } from '@reduxjs/toolkit';
import { createSelector } from '@reduxjs/toolkit';
import type { CartItem, Product } from '../../../types/api';

interface CartState {
    items: CartItem[];
    isOpen: boolean; // –î–æ–±–∞–≤–∏–º –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–æ—Ä–∑–∏–Ω—ã
    loading: boolean; // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    error: string | null; // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏
    showCheckout: boolean; // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    authOpen: boolean; // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
}

const initialState: CartState = {
    items: [],
    isOpen: false,
    loading: false,
    error: null,
    showCheckout: false,
    authOpen: false,
};

export const cartSlice = createSlice({
    name: 'cart',
    initialState,
    reducers: {
        // üõí –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
        addToCart: (state, action: PayloadAction<{ product: Product; quantity: number }>) => {
            const { product, quantity } = action.payload;
            const existingItem = state.items.find((item: CartItem) => item.product.id === product.id);

            if (existingItem) {
                existingItem.quantity += quantity;
            } else {
                state.items.push({ product, quantity });
            }
        },

        // üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        removeFromCart: (state, action: PayloadAction<number>) => { // –ò–∑–º–µ–Ω–∏–ª–∏ –Ω–∞ ID –ø—Ä–æ–¥—É–∫—Ç–∞
            state.items = state.items.filter(item => item.product.id !== action.payload);
        },

        // üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
        updateQuantity: (state, action: PayloadAction<{ id: number; quantity: number }>) => {
            const { id, quantity } = action.payload;

            if (quantity <= 0) {
                state.items = state.items.filter(item => item.product.id !== id);
                return;
            }

            const item = state.items.find(item => item.product.id === id);
            if (item) {
                item.quantity = quantity;
            }
        },

        // üßπ –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
        clearCart: (state) => {
            state.items = [];
        },

        // üëÄ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç—å—é –∫–æ—Ä–∑–∏–Ω—ã
        openCart: (state) => {
            state.isOpen = true;
        },

        closeCart: (state) => {
            state.isOpen = false;
        },

        toggleCart: (state) => {
            state.isOpen = !state.isOpen;
        },

        // üõí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞
        setShowCheckout: (state, action: PayloadAction<boolean>) => {
            state.showCheckout = action.payload;
        },

        // üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∫–Ω–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        setAuthOpen: (state, action: PayloadAction<boolean>) => {
            state.authOpen = action.payload;
        },

        // üîÑ API Actions
        setCartItems: (state, action: PayloadAction<CartItem[]>) => {
            state.items = action.payload;
        },

        setLoading: (state, action: PayloadAction<boolean>) => {
            state.loading = action.payload;
        },

        setError: (state, action: PayloadAction<string | null>) => {
            state.error = action.payload;
        },

        // –°–±—Ä–æ—Å –æ—à–∏–±–∫–∏
        clearError: (state) => {
            state.error = null;
        },
    },
});

export const { 
    addToCart, 
    removeFromCart, 
    updateQuantity, 
    clearCart, 
    openCart, 
    closeCart, 
    toggleCart,
    setShowCheckout,
    setAuthOpen,
    setCartItems,
    setLoading,
    setError,
    clearError
} = cartSlice.actions;

// –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
export const selectCartItems = (state: { cart: CartState }) => state.cart.items;
export const selectCartIsOpen = (state: { cart: CartState }) => state.cart.isOpen;
export const selectCartLoading = (state: { cart: CartState }) => state.cart.loading;
export const selectCartError = (state: { cart: CartState }) => state.cart.error;
export const selectShowCheckout = (state: { cart: CartState }) => state.cart.showCheckout;
export const selectAuthOpen = (state: { cart: CartState }) => state.cart.authOpen;
export const selectTotalItems = createSelector(
    [(state: { cart: CartState }) => state.cart.items],
    (items) => items.reduce((sum, item) => sum + item.quantity, 0)
);
export const selectTotalPrice = createSelector(
    [(state: { cart: CartState }) => state.cart.items],
    (items) => items.reduce((sum, item) => sum + (item.product.price * item.quantity), 0)
);

export default cartSlice.reducer;