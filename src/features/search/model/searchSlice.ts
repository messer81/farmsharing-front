// üîç Redux Toolkit —Å–ª–∞–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–º, –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞, —Ñ–∏–ª—å—Ç—Ä—ã, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
import { createSlice, type PayloadAction } from '@reduxjs/toolkit';

interface SearchState {
    query: string;
    results: any[];
    filters: {
        category: string;
        priceRange: [number, number];
        location: string;
        organicOnly: boolean;
    };
    loading: boolean;
    error: string | null;
    searchHistory: string[];
}

const initialState: SearchState = {
    query: '',
    results: [],
    filters: {
        category: 'All',
        priceRange: [0, 1000],
        location: 'All',
        organicOnly: false,
    },
    loading: false,
    error: null,
    searchHistory: [],
};

export const searchSlice = createSlice({
    name: 'search',
    initialState,
    reducers: {
        // üîç –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        setQuery: (state, action: PayloadAction<string>) => {
            state.query = action.payload;
        },

        // üìã –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        setResults: (state, action: PayloadAction<any[]>) => {
            state.results = action.payload;
            state.loading = false;
            state.error = null;
        },

        // üîÑ –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞
        setLoading: (state, action: PayloadAction<boolean>) => {
            state.loading = action.payload;
        },

        // ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞
        setError: (state, action: PayloadAction<string>) => {
            state.error = action.payload;
            state.loading = false;
        },

        // üîç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞
        setCategoryFilter: (state, action: PayloadAction<string>) => {
            state.filters.category = action.payload;
        },

        setPriceRangeFilter: (state, action: PayloadAction<[number, number]>) => {
            state.filters.priceRange = action.payload;
        },

        setLocationFilter: (state, action: PayloadAction<string>) => {
            state.filters.location = action.payload;
        },

        setOrganicFilter: (state, action: PayloadAction<boolean>) => {
            state.filters.organicOnly = action.payload;
        },

        // üßπ –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤
        resetFilters: (state) => {
            state.filters = initialState.filters;
        },

        // üìö –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞
        addToHistory: (state, action: PayloadAction<string>) => {
            const query = action.payload.trim();
            if (query && !state.searchHistory.includes(query)) {
                state.searchHistory.unshift(query);
                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 10 –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
                if (state.searchHistory.length > 10) {
                    state.searchHistory = state.searchHistory.slice(0, 10);
                }
            }
        },

        // üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞
        clearHistory: (state) => {
            state.searchHistory = [];
        },

        // üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        clearResults: (state) => {
            state.results = [];
            state.query = '';
        },
    },
});

export const {
    setQuery,
    setResults,
    setLoading,
    setError,
    setCategoryFilter,
    setPriceRangeFilter,
    setLocationFilter,
    setOrganicFilter,
    resetFilters,
    addToHistory,
    clearHistory,
    clearResults,
} = searchSlice.actions;

// –°–µ–ª–µ–∫—Ç–æ—Ä—ã
export const selectSearchQuery = (state: { search: SearchState }) => state.search.query;
export const selectSearchResults = (state: { search: SearchState }) => state.search.results;
export const selectSearchLoading = (state: { search: SearchState }) => state.search.loading;
export const selectSearchError = (state: { search: SearchState }) => state.search.error;
export const selectSearchFilters = (state: { search: SearchState }) => state.search.filters;
export const selectSearchHistory = (state: { search: SearchState }) => state.search.searchHistory;

export default searchSlice.reducer; 