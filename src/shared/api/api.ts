// üåê API —Å–ª–æ–π —Å Axios –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å Postman
import { productsAPI, type Product } from './mockProducts';
import axiosInstance, { type ApiResponse, type PaginatedResponse, apiUtils } from './axios';

// üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
const API_CONFIG = {
  timeout: 10000, // 10 —Å–µ–∫—É–Ω–¥
};

// üì° –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ —Å Axios
async function apiRequest<T>(
  endpoint: string,
  options: {
    method?: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';
    data?: any;
    params?: Record<string, any>;
    headers?: Record<string, string>;
  } = {}
): Promise<T> {
  const { method = 'GET', data, params, headers } = options;
  
  try {
    const response = await axiosInstance({
      method,
      url: endpoint,
      data,
      params,
      headers,
      timeout: API_CONFIG.timeout,
    });
    
    return response.data;
  } catch (error) {
    console.error('API Request failed:', error);
    throw error;
  }
}

// üõçÔ∏è API –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å Axios
export const productsApi = {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
  getAll: async (): Promise<ApiResponse<Product[]>> => {
    return apiRequest<ApiResponse<Product[]>>('/api/products');
  },

  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
  getPaginated: async (page: number = 1, limit: number = 8): Promise<PaginatedResponse<Product>> => {
    return apiRequest<PaginatedResponse<Product>>('/api/products', {
      params: { page, limit }
    });
  },

  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –ø–æ ID
  getById: async (id: number): Promise<ApiResponse<Product>> => {
    return apiRequest<ApiResponse<Product>>(`/api/products/${id}`);
  },

  // –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  search: async (query: string): Promise<ApiResponse<Product[]>> => {
    return apiRequest<ApiResponse<Product[]>>('/api/products/search', {
      params: { q: query }
    });
  },

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  getByCategory: async (category: string): Promise<ApiResponse<Product[]>> => {
    return apiRequest<ApiResponse<Product[]>>(`/api/products/category/${encodeURIComponent(category)}`);
  },

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
  create: async (productData: Omit<Product, 'id'>): Promise<ApiResponse<Product>> => {
    return apiRequest<ApiResponse<Product>>('/api/products', {
      method: 'POST',
      data: productData
    });
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç
  update: async (id: number, productData: Partial<Product>): Promise<ApiResponse<Product>> => {
    return apiRequest<ApiResponse<Product>>(`/api/products/${id}`, {
      method: 'PUT',
      data: productData
    });
  },

  // –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç
  delete: async (id: number): Promise<ApiResponse<void>> => {
    return apiRequest<ApiResponse<void>>(`/api/products/${id}`, {
      method: 'DELETE'
    });
  },
};

// üè≠ API –¥–ª—è —Ñ–µ—Ä–º
export const farmsApi = {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ–µ—Ä–º—ã
  getAll: async (): Promise<ApiResponse<any[]>> => {
    return apiRequest<ApiResponse<any[]>>('/api/farms');
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Ñ–µ—Ä–º—É –ø–æ ID
  getById: async (id: number): Promise<ApiResponse<any>> => {
    return apiRequest<ApiResponse<any>>(`/api/farms/${id}`);
  },

  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã —Ñ–µ—Ä–º—ã
  getProducts: async (farmId: number): Promise<ApiResponse<Product[]>> => {
    return apiRequest<ApiResponse<Product[]>>(`/api/farms/${farmId}/products`);
  },
};

// üõí API –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã
export const cartApi = {
  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getCart: async (): Promise<ApiResponse<any>> => {
    return apiRequest<ApiResponse<any>>('/api/cart');
  },

  // –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
  addToCart: async (productId: number, quantity: number = 1): Promise<ApiResponse<any>> => {
    return apiRequest<ApiResponse<any>>('/api/cart/items', {
      method: 'POST',
      data: { productId, quantity }
    });
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
  updateCartItem: async (itemId: number, quantity: number): Promise<ApiResponse<any>> => {
    return apiRequest<ApiResponse<any>>(`/api/cart/items/${itemId}`, {
      method: 'PUT',
      data: { quantity }
    });
  },

  // –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
  removeFromCart: async (itemId: number): Promise<ApiResponse<void>> => {
    return apiRequest<ApiResponse<void>>(`/api/cart/items/${itemId}`, {
      method: 'DELETE'
    });
  },

  // –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
  clearCart: async (): Promise<ApiResponse<void>> => {
    return apiRequest<ApiResponse<void>>('/api/cart', {
      method: 'DELETE'
    });
  },
};

// üîÑ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É mock –∏ —Ä–µ–∞–ª—å–Ω—ã–º API
export const useMockAPI = () => {
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
  return import.meta.env.VITE_USE_MOCK_API !== 'false';
};

// üéØ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π API –∫–ª–∏–µ–Ω—Ç
export const apiClient = {
  products: useMockAPI() ? productsAPI : productsApi,
  farms: farmsApi,
  cart: cartApi,
};

// üîß –≠–∫—Å–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç –∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Axios
export { axiosInstance, apiUtils };
export type { ApiResponse, PaginatedResponse };