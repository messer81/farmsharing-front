import axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse } from 'axios';

// üì° –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API
const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:3000';

// üîß –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Axios
const axiosInstance = axios.create({
  baseURL: API_BASE_URL,
  timeout: 10000, // 10 —Å–µ–∫—É–Ω–¥
  headers: {
    'Content-Type': 'application/json',
  },
});

// üîÑ –ü–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
axiosInstance.interceptors.request.use(
  (config) => {
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    const token = localStorage.getItem('authToken');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ development —Ä–µ–∂–∏–º–µ
    if (import.meta.env.DEV) {
      console.log('üöÄ API Request:', {
        method: config.method?.toUpperCase(),
        url: config.url,
        data: config.data,
      });
    }
    
    return config;
  },
  (error) => {
    console.error('‚ùå Request Error:', error);
    return Promise.reject(error);
  }
);

// üîÑ –ü–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤
axiosInstance.interceptors.response.use(
  (response: AxiosResponse) => {
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –≤ development —Ä–µ–∂–∏–º–µ
    if (import.meta.env.DEV) {
      console.log('‚úÖ API Response:', {
        status: response.status,
        url: response.config.url,
        data: response.data,
      });
    }
    
    return response;
  },
  (error) => {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
    if (error.response) {
      // –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª —Å –æ—à–∏–±–∫–æ–π
      const { status, data } = error.response;
      
      switch (status) {
        case 401:
          // –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
          localStorage.removeItem('authToken');
          console.error('üîê Unauthorized access');
          break;
        case 403:
          console.error('üö´ Access forbidden');
          break;
        case 404:
          console.error('üîç Resource not found');
          break;
        case 500:
          console.error('üí• Server error');
          break;
        default:
          console.error(`‚ùå HTTP Error ${status}:`, data);
      }
    } else if (error.request) {
      // –ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω
      console.error('üåê Network error - no response received');
    } else {
      // –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∑–∞–ø—Ä–æ—Å–∞
      console.error('‚öôÔ∏è Request setup error:', error.message);
    }
    
    return Promise.reject(error);
  }
);

// üéØ –¢–∏–ø—ã –¥–ª—è API –æ—Ç–≤–µ—Ç–æ–≤
export interface ApiResponse<T> {
  data: T;
  message?: string;
  success: boolean;
}

export interface PaginatedResponse<T> {
  data: T[];
  total: number;
  page: number;
  limit: number;
  totalPages: number;
}

// üîß –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
export const apiUtils = {
  // –°–æ–∑–¥–∞–Ω–∏–µ URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  createUrl: (endpoint: string, params?: Record<string, any>): string => {
    if (!params) return endpoint;
    
    const searchParams = new URLSearchParams();
    Object.entries(params).forEach(([key, value]) => {
      if (value !== undefined && value !== null) {
        searchParams.append(key, String(value));
      }
    });
    
    const queryString = searchParams.toString();
    return queryString ? `${endpoint}?${queryString}` : endpoint;
  },
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  handleError: (error: any): string => {
    if (error.response?.data?.message) {
      return error.response.data.message;
    }
    if (error.message) {
      return error.message;
    }
    return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
  },
};

export default axiosInstance; 