// üåü –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
import { useState, useEffect, useCallback } from 'react';
import Box from '@mui/material/Box';
import Grid from '@mui/material/Grid';
import Typography from '@mui/material/Typography';
import Container from '@mui/material/Container';
import CircularProgress from '@mui/material/CircularProgress';
import Alert from '@mui/material/Alert';
import Button from '@mui/material/Button';
import { useTranslation } from 'react-i18next';
import { ProductCard } from './ProductCard';
import { ProductDetails } from './ProductDetails';
import { useGetProductsPaginatedQuery } from '../../../shared/api';
import { CategoryFilter } from '../../../shared/ui/CategoryFilter';
import type { Product } from '../../../types/api';

interface FeaturedProductsProps {
  products?: Product[];
  title?: string;
  subtitle?: string;
  maxProducts?: number;
  onAddToCart?: (product: Product) => void;
}

// –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–µ–ø–µ—Ä—å –≤ shared/ui/CategoryFilter.tsx

export const FeaturedProducts = ({ 
  products: initialProducts, 
  title,
  subtitle,
  maxProducts = 10,
  onAddToCart,
}: FeaturedProductsProps) => {
  const { t } = useTranslation();
  const [products, setProducts] = useState<Product[]>(initialProducts || []);
  const [loading, setLoading] = useState(!initialProducts);
  const [error, setError] = useState<string | null>(null);
  const [selectedCategory, setSelectedCategory] = useState('all');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º RTK Query –ø–∞–≥–∏–Ω–∞—Ü–∏—é (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã initialProducts)
  const { data, isLoading: apiLoading, error: apiError, refetch } = useGetProductsPaginatedQuery(
    { page: 1, limit: maxProducts },
    { skip: Boolean(initialProducts) }
  );

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (data?.data) {
      setProducts(data.data.slice(0, maxProducts));
    }
  }, [data, maxProducts]);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—à–∏–±–æ–∫
  useEffect(() => {
    setLoading(apiLoading);
  }, [apiLoading]);

  useEffect(() => {
    if (!apiError) {
      setError(null);
      return;
    }
    const message = (apiError as any)?.data?.message || (apiError as any)?.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤';
    setError(message);
  }, [apiError]);

  // RTK Query —Å–∞–º –≤—ã–∑—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤

  // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–ø—Å–æ–≤
  useEffect(() => {
    if (initialProducts) {
      setProducts(initialProducts.slice(0, maxProducts));
      setLoading(false);
    }
  }, [initialProducts, maxProducts]);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const filteredProducts = selectedCategory === 'all' 
    ? products 
    : products.filter(product => product.category.toLowerCase() === selectedCategory);



  const handleCategoryChange = (category: string) => {
    setSelectedCategory(category);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const handleProductClick = useCallback((product: Product) => {
    setSelectedProduct(product);
    setIsModalOpen(true);
  }, []);

  const handleModalClose = useCallback(() => {
    setIsModalOpen(false);
    setSelectedProduct(null);
  }, []);

  if (loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', py: 8 }}>
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return (
      <Box sx={{ py: 4 }}>
        <Alert severity="error" sx={{ mb: 2 }}>
          {error}
        </Alert>
        <Button variant="contained" onClick={() => refetch()}>
          {t('common.tryAgain')}
        </Button>
      </Box>
    );
  }

  return (
    <Container maxWidth={false} sx={{ py: { xs: 'var(--space-16)', sm: 'var(--space-24)', md: 'var(--space-32)' }, width: '100%' }}>
      {/* üéØ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ */}
      <Box sx={{ textAlign: 'center', mb: { xs: 'var(--space-16)', sm: 'var(--space-24)', md: 'var(--space-32)' } }}>
        <Typography
          variant="h3"
          sx={{
            mb: { xs: 'var(--space-8)', sm: 'var(--space-12)' },
            fontWeight: 'var(--font-weight-bold)',
            fontSize: { xs: 'var(--font-size-2xl)', sm: 'var(--font-size-3xl)', md: 'var(--font-size-4xl)' },
            background: 'var(--gradient-primary)',
            backgroundClip: 'text',
            WebkitBackgroundClip: 'text',
            WebkitTextFillColor: 'transparent',
            lineHeight: 'var(--line-height-tight)',
          }}
        >
          {title || t('products.title')}
        </Typography>
        <Typography
          sx={{
            color: 'var(--color-text-secondary)',
            fontSize: { xs: 'var(--font-size-base)', sm: 'var(--font-size-lg)' },
            lineHeight: 'var(--line-height-normal)',
            maxWidth: { xs: '100%', sm: '600px', md: '700px' },
            mx: 'auto',
          }}
        >
          {subtitle || t('products.subtitle')}
        </Typography>
      </Box>

      {/* üè∑Ô∏è –§–∏–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
              <CategoryFilter
          selectedCategory={selectedCategory}
          onCategoryChange={handleCategoryChange}
          variant="light"
          sx={{ mb: 4, px: 2 }}
        />

      {/* üõçÔ∏è –°–µ—Ç–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ 5x2 */}
      {filteredProducts.length > 0 ? (
        <>
          <Grid container spacing={3}>
            {filteredProducts.map((product) => (
              <Grid item xs={12} sm={6} md={2.4} key={product.id}>
                <ProductCard 
                  product={product}
                  onAddToCart={onAddToCart}
                  onCardClick={handleProductClick}
                  isFavorite={false}
                />
              </Grid>
            ))}
          </Grid>
        </>
      ) : (
        <Box sx={{ textAlign: 'center', py: 8 }}>
          <Typography variant="h6" color="text.secondary">
            {t('products.noProducts')}
          </Typography>
          <Typography variant="body2" color="text.secondary" sx={{ mt: 2 }}>
            {t('products.noProductsDescription')}
          </Typography>
        </Box>
      )}

      {/* üõçÔ∏è –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ */}
      <ProductDetails
        product={selectedProduct}
        open={isModalOpen}
        onClose={handleModalClose}
      />
    </Container>
  );
}; 