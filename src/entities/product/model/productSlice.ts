// üõçÔ∏è Redux Toolkit —Å–ª–∞–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
import { createSlice, type PayloadAction } from '@reduxjs/toolkit';
import type { Product } from '../../../types/api';

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø Product –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export type { Product } from '../../../types';

interface ProductState {
    products: Product[];
    selectedProduct: Product | null;
    loading: boolean;
    error: string | null;
    filters: {
        category: string;
        priceRange: [number, number];
        organicOnly: boolean;
    };
}

const initialState: ProductState = {
    products: [],
    selectedProduct: null,
    loading: false,
    error: null,
    filters: {
        category: 'All',
        priceRange: [0, 1000],
        organicOnly: false,
    },
};

export const productSlice = createSlice({
    name: 'product',
    initialState,
    reducers: {
        // üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        setProducts: (state, action: PayloadAction<Product[]>) => {
            state.products = action.payload;
            state.loading = false;
            state.error = null;
        },

        // üîÑ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏
        setLoading: (state, action: PayloadAction<boolean>) => {
            state.loading = action.payload;
        },

        // ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        setError: (state, action: PayloadAction<string>) => {
            state.error = action.payload;
            state.loading = false;
        },

        // üéØ –í—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞
        setSelectedProduct: (state, action: PayloadAction<Product | null>) => {
            state.selectedProduct = action.payload;
        },

        // üîç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        setCategoryFilter: (state, action: PayloadAction<string>) => {
            state.filters.category = action.payload;
        },

        setPriceRangeFilter: (state, action: PayloadAction<[number, number]>) => {
            state.filters.priceRange = action.payload;
        },

        setOrganicFilter: (state, action: PayloadAction<boolean>) => {
            state.filters.organicOnly = action.payload;
        },

        // üßπ –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤
        resetFilters: (state) => {
            state.filters = initialState.filters;
        },
    },
});

export const {
    setProducts,
    setLoading,
    setError,
    setSelectedProduct,
    setCategoryFilter,
    setPriceRangeFilter,
    setOrganicFilter,
    resetFilters,
} = productSlice.actions;

// –°–µ–ª–µ–∫—Ç–æ—Ä—ã
export const selectProducts = (state: { product: ProductState }) => state.product.products;
export const selectSelectedProduct = (state: { product: ProductState }) => state.product.selectedProduct;
export const selectProductLoading = (state: { product: ProductState }) => state.product.loading;
export const selectProductError = (state: { product: ProductState }) => state.product.error;
export const selectProductFilters = (state: { product: ProductState }) => state.product.filters;

export default productSlice.reducer; 