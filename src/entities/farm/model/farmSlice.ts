// üöú Redux Toolkit —Å–ª–∞–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–µ—Ä–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, –≤—ã–±–æ—Ä —Ñ–µ—Ä–º—ã
import { createSlice, type PayloadAction } from '@reduxjs/toolkit';
import type { Farm } from '../../../types';

interface FarmState {
    farms: Farm[];
    selectedFarm: Farm | null;
    loading: boolean;
    error: string | null;
    filters: {
        location: string;
        rating: number;
        verifiedOnly: boolean;
    };
}

const initialState: FarmState = {
    farms: [],
    selectedFarm: null,
    loading: false,
    error: null,
    filters: {
        location: 'All',
        rating: 0,
        verifiedOnly: false,
    },
};

export const farmSlice = createSlice({
    name: 'farm',
    initialState,
    reducers: {
        // üöú –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–µ—Ä–º
        setFarms: (state, action: PayloadAction<Farm[]>) => {
            state.farms = action.payload;
            state.loading = false;
            state.error = null;
        },

        // üîÑ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏
        setLoading: (state, action: PayloadAction<boolean>) => {
            state.loading = action.payload;
        },

        // ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        setError: (state, action: PayloadAction<string>) => {
            state.error = action.payload;
            state.loading = false;
        },

        // üéØ –í—ã–±–æ—Ä —Ñ–µ—Ä–º—ã
        setSelectedFarm: (state, action: PayloadAction<Farm | null>) => {
            state.selectedFarm = action.payload;
        },

        // üîç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        setLocationFilter: (state, action: PayloadAction<string>) => {
            state.filters.location = action.payload;
        },

        setRatingFilter: (state, action: PayloadAction<number>) => {
            state.filters.rating = action.payload;
        },

        setVerifiedFilter: (state, action: PayloadAction<boolean>) => {
            state.filters.verifiedOnly = action.payload;
        },

        // üßπ –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤
        resetFilters: (state) => {
            state.filters = initialState.filters;
        },
    },
});

export const {
    setFarms,
    setLoading,
    setError,
    setSelectedFarm,
    setLocationFilter,
    setRatingFilter,
    setVerifiedFilter,
    resetFilters,
} = farmSlice.actions;

// –°–µ–ª–µ–∫—Ç–æ—Ä—ã
export const selectFarms = (state: { farm: FarmState }) => state.farm.farms;
export const selectSelectedFarm = (state: { farm: FarmState }) => state.farm.selectedFarm;
export const selectFarmLoading = (state: { farm: FarmState }) => state.farm.loading;
export const selectFarmError = (state: { farm: FarmState }) => state.farm.error;
export const selectFarmFilters = (state: { farm: FarmState }) => state.farm.filters;

export default farmSlice.reducer; 