import React, { useState } from 'react';
import { useProductsAll } from '../../../shared/api/useApi';
import { useCart } from '../../../features/cart/model/useCart';
import { useLocalizedData } from '../../../shared/lib/useLocalizedData';
import { Header } from '../../header/ui/Header';

// üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
export const ApiDemo: React.FC = () => {
    const [searchQuery, setSearchQuery] = useState('');
    const [selectedCategory, setSelectedCategory] = useState('');

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
    const { data: allProducts, loading: productsLoading, error: productsError, execute: fetchProducts } = useProductsAll();
    const { addItem } = useCart();
    const { getProductTitle, getProductDescription } = useLocalizedData();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    const handleSearch = () => {
        if (searchQuery.trim()) {
            // –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞
        }
    };

    const handleCategoryChange = (category: string) => {
        setSelectedCategory(category);
    };

    const handleAddToCart = (product: any) => {
        addItem(product, 1);
    };

    return (
        <>
            <Header />
            <div className="p-6 max-w-4xl mx-auto">
                <h2 className="text-2xl font-bold mb-6">üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è API</h2>

            {/* –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ */}
            <div className="mb-6">
                <h3 className="text-lg font-semibold mb-3">üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤</h3>
                <div className="flex gap-2">
                    <input
                        type="text"
                        value={searchQuery}
                        onChange={(e) => setSearchQuery(e.target.value)}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞..."
                        className="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                    <button
                        onClick={handleSearch}
                        disabled={productsLoading}
                        className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 disabled:opacity-50"
                    >
                        {productsLoading ? '–ü–æ–∏—Å–∫...' : '–ù–∞–π—Ç–∏'}
                    </button>
                </div>
                {productsError && (
                    <p className="text-red-500 mt-2">‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {productsError}</p>
                )}
            </div>

            {/* –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º */}
            <div className="mb-6">
                <h3 className="text-lg font-semibold mb-3">üè∑Ô∏è –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</h3>
                <div className="flex gap-2 flex-wrap">
                    {['vegetables', 'fruits', 'dairy', 'honey'].map((category) => (
                        <button
                            key={category}
                            onClick={() => handleCategoryChange(category)}
                            className={`px-3 py-1 rounded-md ${
                                selectedCategory === category
                                    ? 'bg-blue-500 text-white'
                                    : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                            }`}
                        >
                            {category}
                        </button>
                    ))}
                </div>
            </div>

            {/* –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ */}
            <div className="mb-6">
                <h3 className="text-lg font-semibold mb-3">üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã</h3>
                <button
                    onClick={fetchProducts}
                    disabled={productsLoading}
                    className="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 disabled:opacity-50 mb-3"
                >
                    {productsLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã'}
                </button>
                {productsError && (
                    <p className="text-red-500 mb-3">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {productsError}</p>
                )}
            </div>

            {/* –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã */}
            {allProducts?.data && allProducts.data.length > 0 && (
                <div className="mb-6">
                    <h3 className="text-lg font-semibold mb-3">üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã ({allProducts.data.length})</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        {allProducts.data.slice(0, 6).map((product: any) => (
                            <div key={product.id} className="border rounded-lg p-4">
                                <h4 className="font-semibold">{getProductTitle(product)}</h4>
                                <p className="text-gray-600">{getProductDescription(product)}</p>
                                <p className="text-green-600 font-bold">‚Ç™{product.price}</p>
                                <button
                                    onClick={() => handleAddToCart(product)}
                                    className="mt-2 px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600"
                                >
                                    –í –∫–æ—Ä–∑–∏–Ω—É
                                </button>
                            </div>
                        ))}
                    </div>
                </div>
            )}

            {/* –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ */}
            {productsLoading && (
                <div className="text-center py-4">
                    <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
                    <p className="mt-2 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
                </div>
            )}

            {/* –û—à–∏–±–∫–∏ */}
            {productsError && (
                <div className="bg-red-50 border border-red-200 rounded-lg p-4 mt-4">
                    <h4 className="text-red-800 font-semibold mb-2">‚ùå –û—à–∏–±–∫–∏ API:</h4>
                    <p className="text-red-600">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {productsError}</p>
                </div>
            )}
        </div>
        </>
    );
}; 